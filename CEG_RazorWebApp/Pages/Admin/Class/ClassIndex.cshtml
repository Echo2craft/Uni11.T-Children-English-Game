@page "/Admin/Class/Index"
@model CEG_RazorWebApp.Pages.Admin.Class.ClassIndexModel
@{
    Layout = null;
    ViewData["Title"] = "Admin All Classes Page";
    string? search = string.Empty;

    var createClass = Model.CreateClass;
    Layout = "~/Pages/Shared/_ALayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Admin/Class/Index">Class</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div id="alertContainer"></div>
                    <div class="card">
                        <div class="card-body">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs">
                                <!-- dung vong for o day -->
                                <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="/Admin/Class/Index">
                                        <i class='bx bx-home-alt-2'></i>
                                        <span>All Classes</span>
                                    </a>
                                </li>
                            </ul>
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <!-- home1 -->
                                <div class="tab-pane active" id="home1" role="tabpanel">
                                    <div class="row search">
                                        <div class="col-sm-12 d-flex">
                                            <div class="col-sm-6 d-flex address-home">
                                            </div>
                                            <div class="col-sm-6 d-flex justify-content-end">
                                                <form method="get" asp-route-search="@search">
                                                    <div>
                                                        <label>
                                                            <input asp-for="@search" class="form-control" type="text" placeholder="Search..." value="@search">
                                                            <i class='bx bx-search-alt'></i>
                                                        </label>
                                                    </div>
                                                </form>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row card-content" id="classList">
                                        <!-- dung vong for o day -->
                                    </div>
                                    <!-- end tapnet -->
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    <div id="addClass" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content modal-addRoom">
                <div class="modal-header">
                    <h4 class="modal-title">Add new Class</h4>
                </div>
                <form method="post" id="createClassForm">
                    <div class="modal-body">
                        <div class="row p-4">
                            <div class="col-12">
                                <div class="row form-group">
                                    <div class="row form-group">
                                        <label asp-for="@createClass.ClassName" class="col-md-4 col-form-label text-md-right"></label>
                                        <input asp-for="@createClass.ClassName" value="@createClass.ClassName" type="text" placeholder="Class Name..." required class="form-control col-md-8">
                                        <span asp-validation-for="@createClass.ClassName" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                        <label asp-for="@createClass.MinStudents" class="col-md-4 col-form-label text-md-right"></label>
                                        <input asp-for="@createClass.MinStudents" value="@createClass.MinStudents" type="number" min="@CEG_RazorWebApp.Libraries.Constants.CLASS_MINIMUM_STUDENTS_REQ" required class="form-control col-md-8">
                                        <span asp-validation-for="@createClass.MinStudents" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                        <label asp-for="@createClass.MaxStudents" class="col-md-4 col-form-label text-md-right"></label>
                                        <input asp-for="@createClass.MaxStudents" value="@createClass.MaxStudents" type="number" max="@CEG_RazorWebApp.Libraries.Constants.CLASS_MAXIMUM_STUDENTS_REQ" required class="form-control col-md-8">
                                        <span asp-validation-for="@createClass.MaxStudents" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                        <label asp-for="@createClass.TeacherName" class="col-md-4 col-form-label text-md-right">Select a Teacher</label>
                                        <div class="col-md-8 p-0">
                                            <!-- search bar with dropdown list-->
                                            <select id="searchableTeacherDropdown" class="form-control custom-select" style="width: 100%;">
                                            </select>
                                        </div>
                                        <span asp-validation-for="@createClass.TeacherName" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>


                                        <label asp-for="@createClass.CourseName" class="col-md-4 col-form-label text-md-right">Select a available Course</label>
                                        <div class="col-md-8 p-0">
                                            <!-- search bar with dropdown list-->
                                            <select id="searchableCourseDropdown" class="form-control custom-select" style="width: 100%;">
                                            </select>
                                        </div>
                                        <span asp-validation-for="@createClass.CourseName" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                        <label asp-for="@createClass.StartDate" class="col-md-4 col-form-label text-md-right"></label>
                                        <input asp-for="@createClass.StartDate" type="datetime-local" value="@createClass.StartDate.ToString("yyyy-MM-ddTHH:mm")" class="form-control col-md-8" required>
                                        <span asp-validation-for="@createClass.StartDate" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                        <label asp-for="@createClass.EndDate" class="col-md-4 col-form-label text-md-right"></label>
                                        <input asp-for="@createClass.EndDate" type="datetime-local" value="@createClass.EndDate.ToString("yyyy-MM-ddTHH:mm")" class="form-control col-md-8" required>
                                        <span asp-validation-for="@createClass.EndDate" id="error_message"
                                              class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>
                                    </div>
                                    <hr>
                                    <div class="row form-group justify-content-center course-content-view">
                                        <label class="col-form-label">Course's Sessions preview</label>
                                        <div id="session-table_wrapper" class="dataTables_wrapper no-footer col-md-12">
                                            <table id="session-table"
                                                   class="table table-striped table-bordered dataTable no-footer"
                                                   aria-describedby="session-table_info">
                                                <thead>
                                                    <tr>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Session ID: activate to sort column ascending">
                                                            Session ID
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Session Number: activate to sort column ascending">
                                                            Session Number
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Title: activate to sort column ascending">
                                                            Session Title
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Description: activate to sort column ascending">
                                                            Session Description
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                        <hr />
                                        <label class="col-form-label">Selected Sessions</label>
                                        <div id="schedule-table_wrapper" class="dataTables_wrapper no-footer col-md-12">
                                            <table id="schedule-table"
                                                   class="table table-striped table-bordered dataTable no-footer"
                                                   aria-describedby="schedule-table_info">
                                                <thead>
                                                    <tr>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Session ID: activate to sort column ascending">
                                                            Session Id
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Session Number: activate to sort column ascending">
                                                            Session Number
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Title: activate to sort column ascending">
                                                            Session Title
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Description: activate to sort column ascending">
                                                            Schedule Start Date & Time
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="hour: activate to sort column ascending">
                                                            Hours
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Description: activate to sort column ascending">
                                                            Schedule End Date & Time
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button class="btn btn-success" type="submit">Create</button>
                        <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var classList = [];
        var courseList;
        var sessionTable;
        var scheduleTable;
        var selectedSessionIds = new Set();
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            sessionTable = new DataTable('#session-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'sessionId' },
                    { data: 'sessionNumber' },
                    { data: 'title' },
                    { data: 'description' }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'type session title...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'multi'
                }
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = sessionTable
                        .row(indexes)
                        .data();
                    // console.log(data);
                    var sessionId = data.sessionId;
                    // If not selected, add to selected set and add to scheduleTable
                    selectedSessionIds.add(sessionId);
                    var startDateTime = getDefaultDate();
                    // console.log(startDateTime);
                    var endDateTime = new Date(startDateTime);
                    endDateTime.setHours(endDateTime.getHours() + data.hours);
                    // Create a new row data for scheduleTable based on selected sessionTable row
                    var newRowData = { // Customize if needed, or leave empty for manual input
                        sessionId: sessionId,
                        sessionNumber: data.sessionNumber,
                        title: data.title,
                        startDate: startDateTime,
                        hour: data.hours,
                        endDate: endDateTime
                    };

                    // Add new row data to scheduleTable
                    scheduleTable.row.add(newRowData).draw();
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = sessionTable
                        .row(indexes)
                        .data();
                    // console.log(data);
                    var sessionId = data.sessionId;
                    // If already selected, unselect and remove from scheduleTable
                    selectedSessionIds.delete(sessionId);

                    // Find and remove the row with the same sessionId in scheduleTable
                    scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        if (this.data().sessionId === data.sessionId) {
                            scheduleTable.row(rowIdx).remove();
                        }
                    });
                    scheduleTable.draw(); // Re-render table after removal
                }
            });

            scheduleTable = new DataTable('#schedule-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    {
                        data: 'sessionId',
                        render: function (data, type, row, meta) {
                            return '<span id="schedule-session-id">' + data + '</span >';
                        }
                    },
                    { data: 'sessionNumber' },
                    { data: 'title' },
                    { // Add a select box in the last column
                        data: 'startDate', // No need to map it to a specific data field
                        render: function (data, type, row, meta) {
                            // return data ? $.fn.dataTable.render.datetime(data, 'YYYY-MM-DD HH:mm').display(data) : '';
                            return '<input type="datetime-local" id="schedule-start-date" class="form-control" value="' + data + '" asp-format="{0:yyyy-MM-ddTHH:mm}"/>';
                        }
                    },
                    {
                        data: 'hour',
                        render: function (data, type, row, meta) {
                            return '<span id="schedule-hour">' + data + '</span >';
                        }
                    },
                    {
                        data: 'endDate',
                        render: function (data, type, row, meta) {
                            return '<span id="schedule-end-date">' + formatDate(data, { includeAmPm : true, monthBeforeDate : true }) + '</span >';
                        }
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'type session title...'
                        },
                        searchIcon: {
                        }
                    }
                },
            }).on('draw', function () {
                // Select all datetime-local inputs within the table
                // console.log( $('#schedule-table').find('input[type="datetime-local"]#schedule-start-date'));
                $('#schedule-table').find('input[type="datetime-local"]#schedule-start-date').each(function () {
                    // Add change event listener for each input
                    $(this).on('change', function () {
                        const selectedDate = new Date(this.value);
                        var rowData = $(this).closest('tr');
                        let hourText = rowData.find('#schedule-hour');
                        let endDateText = rowData.find('#schedule-end-date');
                        if (hourText && hourText.length > 0 && endDateText && endDateText.length > 0) {
                            // console.log(hourText[0].textContent);
                            const hoursToAdd = parseFloat(hourText[0].textContent);
                            const endDate = new Date(selectedDate);
                            endDate.setHours(endDate.getHours() + hoursToAdd);
                            // Format and display the end date in the corresponding span
                            const formattedEndDate = formatDate(endDate, false, false, true, true); // Format as needed
                            endDateText.text(formattedEndDate);
                        }
                    });
                });
            });

            $('#searchableCourseDropdown').select2({
                placeholder: 'Select a course name',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
                .on('select2:close', function (e) {
                    // console.log(e);
                    var text = $('#searchableCourseDropdown').select2('data')[0].text;
                    // Filter options based on the search input
                    var results = courseList.filter(function (item) {
                        return item.courseName && item.courseName === text;
                    });

                    if (results.length > 0 && results[0].sessions) {
                        sessionTable.clear().rows.add(results[0].sessions).draw();
                        scheduleTable.clear().draw();
                    } else {
                        console.error('Selected course or its sessions not found.');
                        sessionTable.clear().draw();
                        scheduleTable.clear().draw();
                    }
                })
                ;

            $('#searchableTeacherDropdown').select2({
                placeholder: 'Select a teacher name',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })

            callApiGetClassList();

            $('#search').on('keyup', function (event) {
                // Get the search term
                var searchTerm = $(this).val().toLowerCase();

                // Filter the classes based on the search term
                var filteredclassList = classList.filter(function (classObject) {
                    return classObject.className.toLowerCase().includes(searchTerm);
                });

                // Display the filtered classList
                setClassDisplay(filteredclassList);
            });
            // Call API to get the list of teacher names
            $.ajax({
                url: apiUrl + 'Teacher/All/Fullname', // API endpoint
                type: 'GET',
                success: function (response) {

                    // Check if the status is true
                    if (response.status) {
                        addTeacherOptions(response.data);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
            // Call API to get the list of course names
            $.ajax({
                url: apiUrl + 'Course/All/Available',// API endpoint
                type: 'GET',
                success: function (response) {

                    // Check if the status is true
                    if (response.status) {
                        courseList = response.data;
                        addCourseOptions(courseList);
                        renderDefaultCourse(courseList);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        });
        function renderDefaultCourse(data) {
            // var text = $('#searchableCourseDropdown').select2('data')[0].text;
            // Filter options based on the search input
            var results = data[0]

            if (results && results.sessions) {
                sessionTable.clear().rows.add(results.sessions).draw();
            } else {
                console.error('Selected course or its sessions not found.');
                sessionTable.clear().draw();
            }
        }
        function addTeacherOptions(data) {
            data.forEach(item => {
                // Add each item as an option
                let newOption = new Option(item, item, false, false);
                $('#searchableTeacherDropdown').append(newOption);
            });
            // Refresh the Select2 dropdown to show new options
            $('#searchableTeacherDropdown').trigger('change'); // Ensure Select2 is updated
        }
        function addCourseOptions(data) {
            data.forEach(item => {
                // Add each item as an option
                let newOption = new Option(item.courseName, item.courseName, false, false);
                $('#searchableCourseDropdown').append(newOption);
            });
            // Refresh the Select2 dropdown to show new options
            $('#searchableCourseDropdown').trigger('change'); // Ensure Select2 is updated
        }
        // Function to calculate today's date + 10 days
        function getDefaultDate() {
            let currentDate = new Date(); // Get the current date and time
            let defaultDate = new Date(currentDate); // Copy the current date

            // Add 10 days to the date
            defaultDate.setDate(currentDate.getDate() + 10);
            // console.log(currentDate);
            // console.log(defaultDate);

            // Get year, month, day, hours, and minutes in local time
            let year = defaultDate.getFullYear();
            let month = String(defaultDate.getMonth() + 1).padStart(2, '0'); // Months are 0-based
            let day = String(defaultDate.getDate()).padStart(2, '0');
            let hours = String(defaultDate.getHours()).padStart(2, '0');
            let minutes = String(defaultDate.getMinutes()).padStart(2, '0');

            // Construct formatted string in 'YYYY-MM-DDTHH:MM' format
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }
        // Function to display alerts
        function showAlert(type, message) {
            var alertHtml = '';

            if (type === 'success') {
                alertHtml = `
                    <div class="alert alert-success alert-dismissible fade show" id="notif">
                        <i class='bx bx-message-alt-x p-1'></i>
                        <strong class="mr-1">` + message + `</strong>
                        <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                            <span><i class='bx bx-x'></i></span>
                        </button>
                    </div>`;
            } else if (type === 'error') {
                alertHtml = `
                    <div class="alert alert-danger alert-dismissible fade show" id="notif">
                        <i class='bx bx-message-alt-x p-1'></i>
                        <strong class="mr-1">` + message + `</strong>
                        <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                            <span><i class='bx bx-x'></i></span>
                        </button>
                    </div>`;
            }

            // Inject the alert HTML into the alert container
            $('#alertContainer').html(alertHtml);
        }
        function callApiGetClassList() {
            $.ajax({
                url: apiUrl + 'Class/Admin/All', // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token// Include the JWT token
                },
                success: function (response) {
                    // Log the entire response to the console for debugging

                    // Check if the status is true
                    if (response.status) {
                        classList = response.data;
                        setClassDisplay(classList);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function setClassDisplay(data) {
            var classList = $('#classList');
            // Reference to the <classList> element
            classList.empty(); // Clear any existing options
            var cardCreateClassHtml = `
                        <div class="col-xl-3 col-lg-6 col-sm-6 my-3 item">
                            <div class="card1 card-child">
                                <div class="card-body add-club">
                                    <button class="border-0" data-toggle="modal" data-target="#addClass">
                                        <span>Add Class</span>
                                        <i class='bx bx-add-to-queue'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
            // var select = $('#createClass_WeeklySchedule'); Reference to the <select> element
            // select.empty();
            // select.append(getScheduleOptions());
            classList.append(cardCreateClassHtml);
            // Loop through the data array and append each class div
            $.each(data, function (index, classObj) {
                var formattedStartDate = formatDate(classObj.startDate, { ignoreHour : true });
                var formattedEndDate = formatDate(classObj.endDate, { ignoreHour: true });
                var statusText = '';
                switch (classObj.status) {
                    case 'Open':
                    case 'Ongoing':
                        statusText = `<span class="outcome" style="float: left;">Status: ${classObj.status}</span>`
                        break;
                    case 'Draft':
                    case 'Postponed':
                        statusText = `<span class="approval" style="float: left;">Status: ${classObj.status}</span>`
                        break;
                    case 'Ended':
                    case 'Cancelled':
                        statusText = `<span class="destroy" style="float: left;">Status: ${classObj.status}</span>`
                        break;
                }
                // Construct card HTML
                var cardHtml = `
                            <div class="col-xl-3 col-lg-6 col-sm-6 my-3">
                                <div class="card1 card-child">
                                    <div class="club-name">
                                        Class ID: ${classObj.classId}
                                        <div class="status">
                                            ${statusText}
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="club-title">
                                            <ul>
                                                <li><h6>Class name:</h6><span>${classObj.className}</span></li>
                                                <li><h6>Course:</h6><span>${classObj.course.courseName}</span></li>
                                                <li><h6>Teacher:</h6><span>${classObj.teacher.account.fullname}</span></li>
                                                <li><h6>Start date:</h6><span>${formattedStartDate}</span></li>
                                                <li><h6>End date:</h6><span>${formattedEndDate}</span></li>
                                                <li><h6>Minimum students amount:</h6><span>${classObj.minimumStudents}</span></li>
                                                <li><h6>Maximum students amount:</h6><span>${classObj.maximumStudents}</span></li>
                                                <li><h6>Current students amount:</h6><span>${classObj.studentProgress.length}</span></li>
                                                <li><h6>Weekly scheduled sessions amount:</h6><span>${classObj.schedules.length}</span></li>
                                                <li><h6>Current enrolls amount:</h6><span>${classObj.enrolls.length}</span></li>
                                            </ul>
                                        </div>
                                    </div>
                                    <div class="form-group mx-auto">
                                        <a class="btn btn-primary clickable-row" href="/Admin/Class/${classObj.classId}/Info" role="button">Details</a>
                                    </div>
                                </div>
                            </div>
                        `;
                // Append the constructed HTML to the class list container
                // <form method="get" asp-route-id="${classObj.classId}">
                //     <button class="btn btn-primary clickable-row" type="submit">See Detail</button>
                // </form>
                classList.append(cardHtml);
            });
        }
        // function getScheduleOptions(selectedType) {
        //     var options = @Html.Raw(Model.SchedulePresets); Example types
        //     console.log(options);
        //     var html = '';

        //     options.forEach(function (type) {
        //         html += `<option value="${type}" ${selectedType === type ? 'selected' : ''}>${type}</option>`;
        //     });

        //     return html;
        // }
        $("#createClassForm").submit(function (event) {
            event.preventDefault(); // Prevent the form from submitting

            // Gather form data
            var classData = {
                ClassName: $("#createClass_ClassName").val(),
                MinStudents: $("#createClass_MinStudents").val(),
                MaxStudents: $("#createClass_MaxStudents").val(),
                TeacherName: $('#searchableTeacherDropdown').select2('data')[0].text,
                CourseName: $('#searchableCourseDropdown').select2('data')[0].text,
                StartDate: $("#createClass_StartDate").val(), // $("#createClass_StartDate").val(),
                EndDate: $("#createClass_EndDate").val(),
                Schedules: []
                // WeeklySchedule: $('#createClass_WeeklySchedule').val()
            };
            // Gather schedule data dynamically (example assuming each schedule is in a row in a table)
            $('#schedule-table tbody tr').each(function () {
                var schedule = {
                    ScheduleDate: $(this).find('#schedule-start-date').val(), // Example date input
                    SessionId: $(this).find('#schedule-session-id').text()
                    // Hours: parseInt($(this).find('.schedule-hours').text(), 10) || 0, // Example hours input
                    // Add additional fields as needed
                };
                // console.log(schedule);

                // Push each schedule object to the Schedules array
                classData.Schedules.push(schedule);
            });

            // Make the AJAX POST request
            $.ajax({
                url: apiUrl + 'Class/Create',
                headers: {
                    'Authorization': 'Bearer ' + token// Include the JWT token
                },
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(classData),
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        alert('Class created successfully!');
                        $('#createClassForm').trigger("reset");
                        callApiGetClassList();
                    } else {
                        console.error("API returned false status. Message:", response.ErrorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        });
    </script>
</body>
</html>