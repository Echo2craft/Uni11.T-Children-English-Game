@page "/admin/courses"
@model CEG_RazorWebApp.Pages.Admin.Course.CourseIndexModel
@{
    ViewData["Title"] = "Admin All Courses Page";
    string? search = string.Empty;
    var createCourse = Model.CreateCourse;
    Layout = Model.LayoutUrl;
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/admin/courses">Course</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div class="card">
                        <div class="card-body">
                            <div class="row search">
                                <div class="col-sm-12 d-flex justify-content-between align-items-center">
                                    <div class="col-sm-6">
                                        <h4 class="m-0">All Courses</h4>
                                    </div>
                                    <div class="col-sm-6 d-flex justify-content-end">
                                        <div class="input-group w-auto">
                                            <select class="custom-select w-auto" id="select-status">
                                                <option value="" selected>All Status</option>
                                                <option value="Available">Available</option>
                                                <option value="Draft">Draft</option>
                                            </select>
                                            <select class="custom-select w-auto" id="select-difficulty">
                                                <option value="" selected>All Difficulty</option>
                                                <option value="Beginner">Beginner</option>
                                                <option value="Intermediate">Intermediate</option>
                                                <option value="Advanced">Advanced</option>
                                            </select>
                                            <div class="input-group-append">
                                                <div class="col p-0 m-0">
                                                    <input asp-for="@search" class="form-control" type="text" placeholder="Search course name..." value="@search">
                                                    <i class='bx bx-search-alt search-icon'></i>
                                                </div>
                                                @* <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Dropdown</button>
                                                <div class="dropdown-menu">
                                                    <a class="dropdown-item" href="#">Action</a>
                                                    <a class="dropdown-item" href="#">Another action</a>
                                                    <a class="dropdown-item" href="#">Something else here</a>
                                                    <div role="separator" class="dropdown-divider"></div>
                                                    <a class="dropdown-item" href="#">Separated link</a>
                                                </div> *@
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row card-content" id="courseList">
                                <!-- dung vong for o day -->
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    <div id="addCourse" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content modal-addRoom">
                <div class="modal-header">
                    <h4 class="modal-title">Add new Course</h4>
                </div>
                <form method="post" id="createCourseForm">
                    <div class="modal-body">
                        <div class="row justify-content-center p-4">
                            <div class="col-xl-12 justify-content-around form-row">
                                <div class="form-group col-xl-6">
                                    <label asp-for="@createCourse.CourseName" class="col-form-label"></label>
                                    <input asp-for="@createCourse.CourseName" value="@createCourse.CourseName" type="text" placeholder="Course Name..." required class="form-control">
                                    <span asp-validation-for="@createCourse.CourseName" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                </div>
                                <div class="form-group col-xl-6">
                                    <label asp-for="@createCourse.CourseType" class="col-form-label"></label>
                                    <input asp-for="@createCourse.CourseType" value="@createCourse.CourseType" type="text" placeholder="Course Type" required class="form-control">
                                    <span asp-validation-for="@createCourse.CourseType" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                </div>
                            </div>
                            <div class="col-xl-12 justify-content-around form-row">
                                <div class="form-group col-xl-6">
                                    <label asp-for="@createCourse.Category" class="col-form-label"></label>
                                    <input asp-for="@createCourse.Category" value="@createCourse.Category" type="text" placeholder="category" readonly required class="form-control">
                                    @* <select class="form-control col-md-7 custom-select" asp-for="@createCourse.Category" required></select> *@
                                    <span asp-validation-for="@createCourse.Category" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                </div>
                                <div class="form-group col-xl-6">
                                    <label asp-for="@createCourse.Difficulty" class="col-form-label"></label>
                                    <select class="form-control custom-select" asp-for="@createCourse.Difficulty" required></select>
                                    <span asp-validation-for="@createCourse.Difficulty" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                </div>
                            </div>
                            <div class="col-xl-12 justify-content-around form-row">
                                <div class="form-group col-xl-4">
                                    <label asp-for="@createCourse.RequiredAge" class="col-form-label"></label>
                                    <input asp-for="@createCourse.RequiredAge" value="@createCourse.RequiredAge" type="number" min="11" max="14" placeholder="11" required class="form-control">
                                    <span asp-validation-for="@createCourse.RequiredAge" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                </div>
                                <div class="form-group col-xl-8">
                                    <label asp-for="@createCourse.Description" class="col-form-label"></label>
                                    <textarea asp-for="@createCourse.Description" value="@createCourse.Description" required class="form-control"></textarea>
                                    <span asp-validation-for="@createCourse.Description" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-7 col-sm-12 mt-2"></span>
                                    @* <label asp-for="@createCourse.TotalHours" class="col-md-3 col-form-label text-md-right"></label>
                                    <input asp-for="@createCourse.TotalHours" value="@createCourse.TotalHours" type="number" min="1" placeholder="Full Name" required class="form-control col-md-7">
                                    <span asp-validation-for="@createCourse.TotalHours" id="error_message"
                                    class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span> *@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button class="btn btn-success" type="submit" name="action">Create</button>
                        <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var courseList = [];
        var homeworkQuestionList = [];
        $(document).ready(function () {
            callApiGetCourseList();
            $('#select-status').off('change').on('change', function () {
                // Get the search term
                var selectedValue = $(this).val().toLowerCase();

                // Filter the classes based on the search term
                var filteredcourseList = courseList.filter(function (courseObject) {
                    return courseObject.status.toLowerCase().includes(selectedValue);
                });

                // Display the filtered classList
                setCourseDisplay(filteredcourseList);
            });
            $('#select-difficulty').off('change').on('change', function () {
                // Get the search term
                var selectedValue = $(this).val().toLowerCase();

                // Filter the classes based on the search term
                var filteredcourseList = courseList.filter(function (courseObject) {
                    return courseObject.difficulty.toLowerCase().includes(selectedValue);
                });

                // Display the filtered classList
                setCourseDisplay(filteredcourseList);
            });
            $('#search').off('keyup').on('keyup', function (event) {
                // Get the search term
                var searchTerm = $(this).val().toLowerCase();

                // Filter the classes based on the search term
                var filteredcourseList = courseList.filter(function (courseObject) {
                    return courseObject.courseName.toLowerCase().includes(searchTerm);
                });

                // Display the filtered classList
                setCourseDisplay(filteredcourseList);
            });
        });
        function callApiGetCourseList() {
            $.ajax({
                url: apiUrl + 'course', // API endpoint
                type: 'GET',
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // console.log("Returned object:", response);
                    // Check if the status is true
                    if (response.status) {
                        courseList = response.data;
                        setCourseDisplay(courseList);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function getDifficultyOptions() {
            var options = ['Beginner', 'Intermediate', 'Advanced']; // Example statuses
            var html = '';

            options.forEach(function (difficult) {
                html += `<option value="${difficult}">${difficult}</option>`;
            });

            return html;
        }
        function setCourseDisplay(data) {
            $('#createCourse_Difficulty').empty();
            $('#createCourse_Difficulty').append(getDifficultyOptions());
            // $('#createCourse_Category').empty();
            // $('#createCourse_Category').append(getCategoryOptions());
            var courseList = $('#courseList');
            // Reference to the <courseList> element
            courseList.empty(); // Clear any existing options
            var cardCreateCourseHtml = `
                <div class="col-xl-3 col-lg-6 col-sm-6 my-3 item">
                    <div class="card1 card-child shadow-sm h-100">
                        <div class="card-body add-club">
                            <button class="border-0" data-toggle="modal" data-target="#addCourse">
                                <span>Add Course</span>
                                <i class='bx bx-add-to-queue'></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;
            courseList.append(cardCreateCourseHtml);
            // Loop through the data array and append each class div
            $.each(data, function (index, courseObj) {

                var statusText = '';
                switch (courseObj.status) {
                    case 'Available':
                        statusText = `<span class="outcome" style="float: left;">Status: ${courseObj.status}</span>`
                        break;
                    case 'Draft':
                    case 'Postponed':
                        statusText = `<span class="approval" style="float: left;">Status: ${courseObj.status}</span>`
                        break;
                    case 'EndofService':
                    case 'Cancelled':
                        statusText = `<span class="destroy" style="float: left;">Status: ${courseObj.status}</span>`
                        break;
                }
                // Construct card HTML
                var cardHtml = `
                    <div class="col-xl-3 col-lg-6 col-sm-6 my-3">
                        <div class="card1 card-child shadow-sm h-100">
                            <div class="club-name d-flex justify-content-between align-items-center flex-wrap">
                                <strong class="text-truncate" style="max-width: 200px;">Course ID: ${courseObj.courseId}</strong>
                                ${statusText}
                            </div>
                            <div class="card-body">
                                <h5 class="card-title h-18">${courseObj.courseName}</h5>
                                <p class="card-text text-truncate" style="max-width: 200px;">${courseObj.description}</p>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-category mr-2'></i><span> Course Type ${courseObj.courseType}</span></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-bar-chart mr-2'></i><span> ${courseObj.difficulty} Difficulty</span></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-time-five mr-2'></i><span> ${courseObj.totalHours} hrs</span></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-child mr-2'></i><span> ${courseObj.requiredAge}+ years old</span></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-spreadsheet mr-2'></i><span> ${courseObj.sessions.length} session(s)</span></li>
                                <li class="list-group-item d-flex align-items-center"><i class='bx bx-sm bx-calendar mr-2'></i><span> ${courseObj.classes.length} class(es)</span></li>
                            </ul>
                            <div class="club-footer d-flex justify-content-around">
                                <a class="btn btn-primary clickable-row d-flex align-items-center" href="/admin/courses/${courseObj.courseId}" role="button"><i class='bx bx-info-circle mr-2'></i> Details</a>
                            </div>
                        </div>
                    </div>
                `;
                // <div class="club-title">
                //     <ul class="club-details">
                //         <li><h6>Course name:</h6><span>${courseObj.courseName}</span></li>
                //         <li><h6>Course type:</h6><span>${courseObj.courseType}</span></li>
                //         <li><h6>Total hours:</h6><span>${courseObj.totalHours}</span></li>
                //         <li><h6>Required age:</h6><span>${courseObj.requiredAge}</span></li>
                //         <li><h6>Difficulty:</h6><span>${courseObj.difficulty}</span></li>
                //         <li><h6>Description:</h6><span class="truncate">${courseObj.description}</span></li>
                //         <li><h6>Sessions amount:</h6><span>${courseObj.sessions.length} Session(s)</span></li>
                //         <li><h6>Classes amount:</h6><span>${courseObj.classes.length} Class(es)</span></li>
                //     </ul>
                // </div>
                // cardHtml = `<div class="col-xl-3 col-lg-6 col-sm-6 my-3">
                //     <div class="card shadow-sm h-100">
                //         <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                //             <strong>Course ID: ${courseObj.courseId}</strong>
                //             <span class="badge badge-light text-dark">${statusText}</span>
                //         </div>
                //         <div class="card-body">
                //             <table class="table table-borderless table-sm mb-0">
                //                 <tbody>
                //                     <tr>
                //                         <th scope="row">Course Name</th>
                //                         <td>${courseObj.courseName}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Course Type</th>
                //                         <td>${courseObj.courseType}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Total Hours</th>
                //                         <td>${courseObj.totalHours}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Required Age</th>
                //                         <td>${courseObj.requiredAge}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Difficulty</th>
                //                         <td>${courseObj.difficulty}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Description</th>
                //                         <td class="text-truncate" style="max-width: 200px;">${courseObj.description}</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Sessions</th>
                //                         <td>${courseObj.sessions.length} Session(s)</td>
                //                     </tr>
                //                     <tr>
                //                         <th scope="row">Classes</th>
                //                         <td>${courseObj.classes.length} Class(es)</td>
                //                     </tr>
                //                 </tbody>
                //             </table>
                //         </div>
                //         <div class="card-footer text-center">
                //             <a class="btn btn-sm btn-primary" href="/Admin/Course/${courseObj.courseId}/Info">Details</a>
                //         </div>
                //     </div>
                // </div>`;
                // Append the constructed HTML to the class list container
                courseList.append(cardHtml);
            });
        }
        $("#createCourseForm").submit(function (event) {
            event.preventDefault(); // Prevent the form from submitting

            // Gather form data
            var courseData = {
                CourseName: $("#createCourse_CourseName").val(),
                CourseType: $("#createCourse_CourseType").val(),
                Category: $("#createCourse_Category").val(),
                Description: $("#createCourse_Description").val(),
                Difficulty: $("#createCourse_Difficulty").val(),
                RequiredAge: $("#createCourse_RequiredAge").val(),
                TotalHours: 0,
            };
            // Make the AJAX POST request
            $.ajax({
                url: apiUrl + 'course',
                headers: {
                    'Authorization': 'Bearer ' + token// Include the JWT token
                },
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(courseData),
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        // alert('Course created successfully!');
                        showAlert('success', 'Course created successfully!');
                        $('#createCourseForm').trigger("reset");
                        callApiGetCourseList();
                    } else {
                        showAlert('error', "Error: \n" + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        });
    </script>
</body>
</html>
