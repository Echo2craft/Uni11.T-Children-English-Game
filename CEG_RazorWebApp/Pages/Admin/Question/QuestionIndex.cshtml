@page "/Admin/Question/Index"
@model CEG_RazorWebApp.Pages.Admin.Question.QuestionIndexModel
@{
    ViewData["Title"] = "Admin All Questions Page";
    var createQuestion = Model.CreateQuestion;
    Layout = Model.LayoutUrl;
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Admin/Question/Index">Question</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div class="card">
                        <div class="card-body">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs">
                                <!-- dung vong for o day -->
                                <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="#home1">
                                        <i class='bx bx-home-alt-2'></i>
                                        <span>All Questions</span>
                                    </a>
                                </li>
                            </ul>
                            <div id="alertContainer"></div>
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <!-- home1 -->
                                <div class="tab-pane active" id="home1" role="tabpanel">
                                    <div id="question-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="question-table"
                                               class="table table-striped table-bordered dataTable no-footer"
                                               aria-describedby="question-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="question-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Question: activate to sort column ascending">
                                                        Question
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="question-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Answers amount: activate to sort column ascending">
                                                        Amount of Answers
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <!-- end tapnet -->
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    <div id="createQuestion" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content modal-addRoom">
                <div class="modal-header">
                    <h4 class="modal-title">Add new Homework Question</h4>
                </div>
                <form method="post" id="createQuestionForm">
                    <div class="modal-body">
                        <div class="row p-4">
                            <div class="col-12">
                                <div class="row form-group">
                                    <label asp-for="@createQuestion.Question" class="col-md-3 col-form-label text-md-right"></label>
                                    <textarea asp-for="@createQuestion.Question" value="@createQuestion.Question" required class="form-control col-md-7"></textarea>
                                    <span asp-validation-for="@createQuestion.Question" id="error_message"
                                          class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button class="btn btn-success" type="submit" name="action" value="createQuestion">Create</button>
                        <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    @* <partial name="PartialViews/_CreateTeacherPartial" model="new AccountIndexModel.CreateTeacherModel(createTeacher)"/> *@
    <script>
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var table;
        var questionList = [];
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('toggle', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bxs-add-to-queue bx-sm',
                    modalId: 'createQuestion' // Modal ID that the icon will trigger
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;
                icon.setAttribute('data-toggle', 'modal');
                icon.setAttribute('data-target', `#${options.modalId}`);

                // Append icon to container
                container.appendChild(icon);

                // Insert the container in the DataTable toolbar
                $(settings.nTableWrapper).prepend(container);

                return container;
            });
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            table = new DataTable('#question-table', {
                ajax: {
                    url: apiUrl + 'Question/All/Ordered',
                    dataSrc: 'data',
                    headers: {
                        'Authorization': 'Bearer ' + token// Include the JWT token
                    }
                },
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'question' },
                    { data: 'answersAmount' },
                ],
                select: {
                    style: 'single'
                },
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search question...'
                        },
                        toggle: {
                        },
                        searchIcon: {
                        }
                    }
                }
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = table
                        .row(indexes)
                        .data()
                        .homeworkQuestionId;
                    window.location.href = '/Admin/Question/' + data + '/Info';
                }
            });
            // var createQuestionToggleHtml = `
            //     <i class="bx bx-search-alt question-search-icon"></i>
            // `;
            // $('.dt-search').append(createQuestionToggleHtml);
            // $('.dt-search label').text('');
            $('#createQuestionForm').submit(function (event) {
                event.preventDefault(); // Prevent the form from submitting normally

                // Get the form data
                var formData = {
                    question: $('textarea[id="createQuestion_Question"]').val()
                };

                // Make the AJAX request
                callApiPostCreateQuestion(formData);
                $('#createQuestionForm').trigger("reset");
            });
        });
        // table.on('select', function (e, dt, type, indexes) {
        //     if (type === 'row') {
        //         var data = table
        //             .rows(indexes)
        //             .data();

        //         do something with the ID of the selected items
        //     }
        //     window.location.href = '/Admin/Question/' + data.homeworkQuestionId + '/Info';
        // });
        // $('#question-table tbody').on('click', 'tr', function () {
        //     var table = $('#question-table').DataTable();
        //     var data = table.row(this).data();
        //     if ($(this).hasClass('selected')) {
        //         $(this).removeClass('selected');
        //     }
        //     else {
        //         table.$('tr.selected').removeClass('selected');
        //         $(this).addClass('selected');
        //     }
        //     window.location.href = '/Admin/Question/' + data.homeworkQuestionId + '/Info';
        //     alert('You clicked on ' + data.homeworkQuestionId + "'s row");
        // });
        // Function to display alerts
        function showAlert(type, message) {
            var alertHtml = '';

            if (type === 'success') {
                alertHtml = `
                                <div class="alert alert-success alert-dismissible fade show" id="notif">
                                    <i class='bx bx-message-alt-x p-1'></i>
                                    <strong class="mr-1">` + message + `</strong>
                                    <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                        <span><i class='bx bx-x'></i></span>
                                    </button>
                                </div>
                            `;
            } else if (type === 'error') {
                alertHtml = `
                                <div class="alert alert-danger alert-dismissible fade show" id="notif">
                                    <i class='bx bx-message-alt-x p-1'></i>
                                    <strong class="mr-1">` + message + `</strong>
                                    <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                        <span><i class='bx bx-x'></i></span>
                                    </button>
                                </div>
                            `;
            }

            // Inject the alert HTML into the alert container
            $('#alertContainer').html(alertHtml);
        }
        function callApiPostCreateQuestion(formData) {
            $.ajax({
                url: apiUrl + 'Question/Create', // Specify your Razor Page here
                type: 'POST',
                data: JSON.stringify(formData),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    // Handle success (display a success message or redirect, etc.)
                    if (response.status) {
                        showAlert('success', "Question created successfully");
                        table.ajax.reload();
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function getStatusOptions(selectedStatus) {
            var options = ['Inactive', 'Active', 'Expired', 'Denied', 'Suspended']; // Example statuses
            var html = '';

            options.forEach(function (status) {
                html += `<option value="${status}" ${selectedStatus === status ? 'selected' : ''}>${status}</option>`;
            });

            return html;
        }
    </script>
</body>
</html>
