@page "/Admin/Transaction/Index"
@model CEG_RazorWebApp.Pages.Admin.Transaction.TransactionIndexModel
@{
    Layout = null;
    ViewData["Title"] = "Admin All Transactions Page";
    string? search = string.Empty;

    //CEG_WebMVC.Models.ViewModels.Account.Create.CreateParentVM createParent = Model.createParent;

    //var accountStatuses = Model.AccountStatuses;

    Layout = "~/Pages/Shared/_ALayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Admin/Transaction/Index">Transaction</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div class="card">
                        <div class="card-body">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs">
                                <!-- dung vong for o day -->
                                <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="#home1">
                                        <i class='bx bx-home-alt-2'></i>
                                        <span>All Transactions</span>
                                    </a>
                                </li>
                            </ul>
                            <div id="alertContainer"></div>
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <!-- home1 -->
                                <div class="tab-pane active" id="home1" role="tabpanel">
                                    <div id="transaction-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="transaction-table"
                                               class="table table-striped table-bordered dataTable no-footer"
                                               aria-describedby="transaction-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Transaction ID: activate to sort column ascending">
                                                        ID
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Payer: activate to sort column ascending">
                                                        Payer
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Class Name: activate to sort column ascending">
                                                        VNPay Id
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Amount
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Type
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Transaction Date
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Confirm Date
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Status
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- end tapnet -->
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

            </div>
        </div>
    </div>
    <script>
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var transactionList;
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            sessionTable = new DataTable('#transaction-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'transactionId' },
                    { data: 'parent.account.fullname' },
                    { data: 'vnpayId' },
                    { data: 'transactionAmount' },
                    { data: 'transactionType' },
                    {
                        data: 'transactionDate',
                        render: function (data, type, row, meta) {
                            return '<span>' + formatDate(data, { addDayOfWeek: true, includeAmPm: true }) + '</span >';
                        }
                    },
                    {
                        data: 'confirmDate',
                        render: function (data, type, row, meta) {
                            return '<span>' + formatDate(data, { addDayOfWeek: true, includeAmPm: true }) + '</span >';
                        }
                    },
                    { data: 'transactionStatus' }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'search info...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'single'
                }
            })
                // .on('select', function (e, dt, type, indexes) {
                //     if (type === 'row') {
                //         var data = sessionTable
                //             .row(indexes)
                //             .data();
                //         console.log(data);
                //         var sessionId = data.sessionId;
                //         If not selected, add to selected set and add to scheduleTable
                //         selectedSessionIds.add(sessionId);
                //         var startDateTime = getDefaultDate();
                //         console.log(startDateTime);
                //         var endDateTime = new Date(startDateTime);
                //         endDateTime.setHours(endDateTime.getHours() + data.hours);
                //         Create a new row data for scheduleTable based on selected sessionTable row
                //         var newRowData = { Customize if needed, or leave empty for manual input
                //             sessionId: sessionId,
                //             sessionNumber: data.sessionNumber,
                //             title: data.title,
                //             startDate: startDateTime,
                //             hour: data.hours,
                //             endDate: endDateTime
                //         };

                //         Add new row data to scheduleTable
                //         scheduleTable.row.add(newRowData).draw();
                //     }
                // }).on('deselect', function (e, dt, type, indexes) {
                //     if (type === 'row') {
                //         var data = sessionTable
                //             .row(indexes)
                //             .data();
                //         console.log(data);
                //         var sessionId = data.sessionId;
                //         If already selected, unselect and remove from scheduleTable
                //         selectedSessionIds.delete(sessionId);

                //         Find and remove the row with the same sessionId in scheduleTable
                //         scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                //             if (this.data().sessionId === data.sessionId) {
                //                 scheduleTable.row(rowIdx).remove();
                //             }
                //         });
                //         scheduleTable.draw(); Re-render table after removal
                //     }
                // })
                ;

            callApiGetTransactionList();
        });
        function callApiGetTransactionList() {
            $.ajax({
                url: apiUrl + 'Transaction/All', // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token// Include the JWT token
                },
                success: function (response) {
                    // Log the entire response to the console for debugging

                    // Check if the status is true
                    if (response.status) {
                        transactionList = response.data;
                        console.log(transactionList);
                        sessionTable.clear().rows.add(transactionList).draw();
                        // setClassDisplay(classList);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
    </script>
</body>
</html>