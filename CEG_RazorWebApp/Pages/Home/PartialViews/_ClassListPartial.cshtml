<div class="row contain">
    <div class="col-12">
        <div id="class-list" class="content__list row">
            <!-- Class list will be rendered here -->
        </div>
        <div class="pagination mb-3" id="pagination-controls">
            <!-- Pagination buttons will be generated here -->
        </div>
    </div>
</div>
<script>
    var classList = []; // Store all fetched classes
    var pageSize = 9; // Number of items per page
    var currentPage = 1;
    $(document).ready(function () {
        callApiGetClassList();
    });
    function callApiGetClassList() {
        $.ajax({
            url: apiUrl + 'Class/All', // API endpoint
            type: 'GET',
            success: function (response) {
                // Check if the status is true
                if (response.status) {
                    classList = response.data;
                    setClassDisplay();
                    setPaginationDisplay();
                } else {
                    console.error("API returned false status.");
                }
            },
            error: function (xhr, status, error) {
                // Extract the custom error message if it exists
                var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                // Check if errorResponse.errors exists and is an object
                if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                    // Loop through each field in the errors object and append to the errorMessage
                    for (var field in errorResponse.errors) {
                        if (errorResponse.errors.hasOwnProperty(field)) {
                            // Add each error message for the field, joining multiple messages if they exist
                            var fieldErrors = errorResponse.errors[field].join(", ");
                            errorMessage += `\n${field}: ${fieldErrors}`;
                        }
                    }
                }
                // Display the error message using your custom showAlert function
                showAlert('error', "Error:" + errorMessage);
            }
        });
    }
    function setClassDisplay() {
        var startIndex = (currentPage - 1) * pageSize;
        var endIndex = Math.min(startIndex + pageSize, classList.length);

        formatter = new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND',
        });

        // Clear existing content
        var classListContainer = $('#class-list');
        classListContainer.empty();

        if (classList.length === 0) {
            // Handle empty state
            classListContainer.append('<div class="col-12 text-center"><p>No classes available.</p></div>');
            return;
        }

        // Loop through the current page's data
        var currentPageData = classList.slice(startIndex, endIndex);
        currentPageData.forEach(function (classItem) {
            var classHtml = `
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="card-title">${classItem.className}</h5>
                            <span class="badge bg-info">${classItem.status}</span>
                        </div>
                        <div class="card-body">
                            <p><strong>Students:</strong> ${classItem.numberOfStudents}/${classItem.maximumStudents}</p>
                            <p><strong>Start Date:</strong> ${new Date(classItem.startDate).toLocaleDateString()}</p>
                            <p><strong>End Date:</strong> ${new Date(classItem.endDate).toLocaleDateString()}</p>
                            <p><strong>Enrollment Fee:</strong> $${(classItem.enrollmentFee / 1000).toFixed(2)}</p>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary" onclick="viewClassDetails(${classItem.classId})">View Details</button>
                        </div>
                    </div>
                </div>
            `;
            classListContainer.append(classHtml);
        });
    }
    function setPaginationDisplay() {
        var totalPages = Math.ceil(classList.length / pageSize); // Total number of pages
        var paginationContainer = $('.pagination');

        // Clear existing pagination
        paginationContainer.empty();

        if (totalPages <= 1) {
            return; // No pagination needed if only one page
        }

        // Previous button
        paginationContainer.append(`
            <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                <button class="page-link" onclick="changePage(${currentPage - 1})">Previous</button>
            </li>
        `);

        // Page numbers
        for (var i = 1; i <= totalPages; i++) {
            paginationContainer.append(`
                <li class="page-item ${currentPage === i ? 'active' : ''}">
                    <button class="page-link" onclick="changePage(${i})">${i}</button>
                </li>
            `);
        }

        // Next button
        paginationContainer.append(`
            <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
                <button class="page-link" onclick="changePage(${currentPage + 1})">Next</button>
            </li>
        `);
    }
    function changePage(newPage) {
        var totalPages = Math.ceil(classList.length / pageSize);

        // Ensure the new page is within valid range
        if (newPage < 1 || newPage > totalPages) {
            return;
        }

        currentPage = newPage;

        // Update the display
        updateDisplay();
    }
    function updateDisplay() {
        setClassDisplay();
        setPaginationDisplay();
    }
</script>