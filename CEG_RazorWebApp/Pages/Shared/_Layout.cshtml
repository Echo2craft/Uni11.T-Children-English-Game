@inject IConfiguration Config
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - childrenenglishgame</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link href="~/css/register.css" rel="stylesheet">
    <link href="~/css/all.min.css" rel="stylesheet">
    <link href="~/css/tiny-slider.css" rel="stylesheet">
    <link rel="stylesheet" href="~/css/main.css">
    <link rel="stylesheet" href="~/vendor/bootstrap-4.5.3-dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/loading.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.2/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,300;0,400;0,700;0,900;1,100&family=Roboto+Condensed:wght@400;700&display=swap"
          rel="stylesheet">
    <link rel="stylesheet" href="~/css/owl.carousel.min.css">
    <link rel="stylesheet" href="~/css/owl.theme.default.min.css">
    <link rel="stylesheet" href="~/css/sb-admin-2.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <!-- JQuery -->
    <script src="https://ajax.aspnetcdn.com/ajax/jquery/jquery-3.6.0.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.19.2/jquery.validate.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate.unobtrusive/3.2.11/jquery.validate.unobtrusive.min.js"></script>
</head>
<body>
    <div id="loading-screen">
        <!--<audio id="loading-audio" autoplay>
            <source src="~/images/media/LoadingSound.mp3" type="audio/mp3">
        </audio> --->
        <div class="loader">
            <img src="~/images/study.png" alt="Loading Image" class="loading-img web-logo-image">
            <div class="text-animation">Loading... Please wait</div>
        </div>
    </div>
    <header>
        <div class="header__top d-flex justify-content-between align-items-center container-fluid py-2 fixed-top">
            <div class="header__left">
                <a href="https://www.facebook.com/groups/606292706975811/?hoisted_section_header_type=recently_seen&multi_permalinks=1480594572878949" target="_blank"><i class="fab fa-facebook-f"></i></a>
                <a href="https://github.com/hoadmse151329/birdclubsystem" target="_blank">
                    <i class="fab fa-github"></i>
                </a>
                <a href="#" class="text-decoration-none" onclick="sendEmail('hotrankhanhduy16@gmail.com')">
                    <i class="fa fa-envelope"></i> hotrankhanhduy16@gmail.com
                </a>
                <a href="tel:0396421901" class="mr-4 text-decoration-none">
                    <i class="fas fa-phone-alt"></i>
                    088 873 8852
                </a>
            </div>
            <div class="header__right">
                <ul class="nav">
                    @* @if ((string)TempData["ROLE_NAME"] != "Guest")
                    {
                        <!-- Display this when the user is logged in -->
                        <li class="nav-item nav-item-text">
                            <div class="notification-dropdown dropdown">
                                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton"
                                        data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <i class="fa fa-bell"></i><span class="notification">@ViewBag.NotificationCount</span>
                                    <span type="hidden" name="notificationId" value="${o.notificationId}"></span>
                                </button>
                                <div class="dropdown-menu notification-table animate__animated animate__fadeInDown"
                                     aria-labelledby="dropdownMenuButton">
                                    <div class="dropdown-header">
                                        <span class="triangle"></span>
                                        <span class="heading">Notification</span>
                                    </div>
                                    <div class="dropdown-body">
                                        <a class="dropdown-item" href="@Url.Action("MemberNotification", "Member")">
                                            <p class="truncate"> See All <i class="fa fa-angle-right"></i></p>
                                        </a>
                                        @if (ViewBag.NotificationTitle != null)
                                        {
                                            foreach (var title in ViewBag.NotificationTitle)
                                            {
                                                <a class="dropdown-item" href="@Url.Action("MemberNotification", "Member")">
                                                    <p class="truncate">@title</p>
                                                </a>
                                            }
                                        }
                                        <a class="dropdown-item" href="@Url.Action("MemberNotification", "Member")">
                                            <p class="truncate">You have new notification</p>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </li>
                        <li class="nav-item nav-item-text">
                            <div class="user-dropdown dropdown">
                                <button class="btn-user-dropdown text-white btn dropdown-toggle" type="button"
                                        id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                    <span>Hello, @TempData["USER_NAME"]</span>
                                    <span><img id="profile-pic" class="img-fluid" src=@TempData["IMAGE_PATH"] alt="fullname"></span>
                                </button>
                                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                    <a class="dropdown-item" href="@Url.Action("MemberProfile", "Member")">
                                        Member Profile
                                    </a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="@Url.Action("MemberHistoryEvent", "Member")">HistoryEvents</a>
                                    <div class="dropdown-divider"></div>
                                    <a class="dropdown-item" href="@Url.Action("Logout", "Auth")">Logout</a>
                                </div>
                            </div>
                        </li>
                    }
                    else
                    {
                        <!-- Display this when the user is not logged in -->
                        <li class="nav-item nav-item-text">
                            <a class="nav-link" href="@Url.Action("login", "Auth")">Login</a>
                        </li>
                    } *@
                    <!-- Display this when the user is not logged in -->
                    <li class="nav-item nav-item-text">
                        <a class="nav-link" href="/Auth/Login">Login</a>
                    </li>
                </ul>
            </div>
        </div>
        <div class="header__bottom">
            <nav class="myNavBar navbar navbar-expand-lg navbar-dark container-fluid">
                <div class="container-fluid">
                    <a class="navbar-brand nav-name-text" href="/Home/Index">
                        <img class="d-inline-block web-logo-image" src="/images/study.png" />
                        <a class="navbar-brand nav-name-text nav-link" href="/Home/Index">Children English Game</a>
                    </a>
                    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="collapse navbar-collapse" id="navbarText">
                        <ul class="navbar-nav ms-auto mb-2 mb-xl-0">
                            <li class="nav-item nav-item-text">
                                <a class="nav-link nav-tab-button" href="/Home/Index">Home</a>
                            </li>
                            <li class="nav-item nav-item-text">
                                <a class="nav-link nav-tab-button" href="/Home/Course/Index">Courses</a>
                            </li>
                            <li class="nav-item nav-item-text">
                                <a class="nav-link nav-tab-button" href="/Home/Class/Index">Classes</a>
                            </li>
                            <li class="nav-item nav-item-text">
                                <a class="nav-link nav-tab-button" href="/Home/Student/Index">Students</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>
        </div>
    </header>
    <div class="container-fluid">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>
    <footer class="footer">
        <div class="container-sm">
            @* <p class="row bottom-text text-wrap mx-3 text-color">
                We welcome donations in any amount to help fund club initiatives and activities, such as the purchase of
                bird seed for feeding birds, necessaries for harmed bird treatments, the annual Contests, Field trips
                and other club events, the purchase of supplies and tools for our volunteer projects, etc.
            </p>
            <a class="row button" href="/VnPay/Index">
                <div class="d-flex justify-content-center bottom-text">Donate</div>
            </a> *@
            <div class="row justify-content-between">
                <div class="col d-flex bottom-text text-color">@@2024 Children English Game</div>
            </div>
        </div>
    </footer>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/waypoints/4.0.1/jquery.waypoints.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/loading.js" defer></script>
    @*    <script>
    document.addEventListener('DOMContentLoaded', function () {
    var loadingAudio = document.getElementById('loading-audio');

    // Function to play the audio
    function playAudio() {
    if (loadingAudio.paused) {
    loadingAudio.play();
    }
    }

    // Play the audio when the user interacts with the document
    document.addEventListener('click', playAudio);
    });
    </script>*@
    <script>
        // Immediately store apiUrl in sessionStorage when the page loads
        document.addEventListener('DOMContentLoaded', function () {
            // Define your API URL here (you could get this value from a server-side config)
            var apiUrl = '@Url.Content(Config["DefaultApiUrl:ConnectionString"] + Config["DefaultApiUrl:ApiUrl"] ?? "https://localhost:7143/api/")';

            // Store it in sessionStorage
            sessionStorage.setItem('apiUrl', apiUrl);

            // console.log("API URL stored in sessionStorage:", sessionStorage.getItem('apiUrl'));

            // Get the current page URL path
            let currentPath = window.location.pathname;

            // Select all navbar links
            let navLinks = document.querySelectorAll(".nav-tab-button");

            // Loop through each link and check if its href matches the current page
            navLinks.forEach(link => {
                // var fullLink = "/Home" + currentPath;
                // console.log(fullLink);
                // console.log(link.getAttribute("href"));
                if (link.getAttribute("href") === currentPath) {
                    link.classList.add("active-tab"); // Add class to highlight it
                }
            });
        });
        function sendEmail(email) {
            var mailtoLink = 'mailto:' + email;
            window.open(mailtoLink, '_self');
        }
        function formatTime(timeString, {
            includeSeconds = false,
            includeAmPm = false
        } = {}) {
            // Parse hours, minutes, and seconds from the input string
            let [hours, minutes, seconds] = timeString.split(':').map(Number);

                    let amPm = '';
            if (includeAmPm) {
                // Determine AM or PM
                amPm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format, with 12 instead of 0
            }

            // Format hours and minutes to always have two digits
            hours = String(hours).padStart(2, '0');
            minutes = String(minutes).padStart(2, '0');
            seconds = String(seconds).padStart(2, '0');
                    if (includeSeconds){
                // Return formatted time string
                return `${hours}:${minutes}:${seconds} ${amPm}`;
            }
            // Return formatted time string
            return `${hours}:${minutes} ${amPm}`;
        };
        function getTimeFromDate(date) {
            let d = new Date(date);
            // Get hours, minutes
            let hours = String(d.getHours()).padStart(2, '0');
            let minutes = String(d.getMinutes()).padStart(2, '0');

            // Optionally, get seconds
            let seconds = String(d.getSeconds()).padStart(2, '0');

            // Return formatted time string
            return `${hours}:${minutes}:${seconds}`;
        };
        function formatDate(date, {
            ignoreHour = false,
            addDayOfWeek = false,
            includeAmPm = false,
            monthBeforeDate = false,
            lineBreak = false,
            inputDateFormat = false // New option for YYYY-MM-DD format
        } = {}) {
            let d = new Date(date);

            // Get day, month, year
            let day = String(d.getDate()).padStart(2, '0');
            let month = String(d.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            let year = d.getFullYear();

            // Get hours, minutes
            let hours = String(d.getHours()).padStart(2, '0');
            let minutes = String(d.getMinutes()).padStart(2, '0');

            // Optionally, get seconds
            let seconds = String(d.getSeconds()).padStart(2, '0');

            let amPm = '';
            if (includeAmPm) {
                amPm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12; // Convert to 12-hour format, with 12 instead of 0
            }
            hours = String(hours).padStart(2, '0'); // Pad with zero if needed

            // Optional: Get day of the week if `addDayOfWeek` is true
            let dayOfWeek = '';
            if (addDayOfWeek) {
                const daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
                dayOfWeek = daysOfWeek[d.getDay()] + ', ';
            }
            // Handle input format: return only `YYYY-MM-DD`
            if (inputDateFormat) {
                return `${year}-${month}-${day}`;
            }
            // Return only the date if `ignoreHour` is true
            if (ignoreHour) {
                if (lineBreak) return `${dayOfWeek}<br />${day}/${month}/${year}`;
                return `${dayOfWeek}${day}/${month}/${year}`;
            }

            if (monthBeforeDate) {
                if (lineBreak) return `${dayOfWeek}<br />${month}/${day}/${year}<br />${hours}:${minutes} ${amPm}`.trim();
                // Return the formatted date and time as `day, mm/dd/yyyy hh:mm AM/PM` if `addDayOfWeek` and `includeAmPm` are true
                return `${dayOfWeek}${month}/${day}/${year} ${hours}:${minutes} ${amPm}`.trim();
            }
            if (lineBreak) return `${dayOfWeek}<br />${day}/${month}/${year}<br />${hours}:${minutes} ${amPm}`.trim();
            // Return the formatted date and time as `day, dd/mm/yyyy hh:mm AM/PM` if `addDayOfWeek` and `includeAmPm` are true
            return `${dayOfWeek}${day}/${month}/${year} ${hours}:${minutes} ${amPm}`.trim();

            // If you want to include seconds as well, use this return:
            // return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
        };
        // Function to display alerts
        function showAlert(type, message) {
            var alertHtml = '';

            if (type === 'success') {
                alertHtml = `
                            <div class="alert alert-success alert-dismissible fade show" id="notif">
                                <i class='bx bx-message-alt-x p-1'></i>
                                <strong class="mr-1">` + message + `</strong>
                                <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                    <span><i class='bx bx-x'></i></span>
                                </button>
                            </div>
                        `;
            } else if (type === 'error') {
                alertHtml = `
                            <div class="alert alert-danger alert-dismissible fade show" id="notif">
                                <i class='bx bx-message-alt-x p-1'></i>
                                <strong class="mr-1">` + message + `</strong>
                                <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                    <span><i class='bx bx-x'></i></span>
                                </button>
                            </div>
                        `;
            }

            // Inject the alert HTML into the alert container
            $('#alertContainer').html(alertHtml);
        }
    </script>
    <script>
        function randomizeColor() {
            return Math.floor(Math.random() * 256);
        }

        function generateRandomRGB() {
            const r = randomizeColor();
            const g = randomizeColor();
            const b = randomizeColor();
            return `rgb(${r}, ${g}, ${b})`;
        }
        $(document).ready(function () {
            setInterval(() => {
                const topColor = generateRandomRGB();
                const rightColor = generateRandomRGB();
                const bottomColor = generateRandomRGB();
                const leftColor = generateRandomRGB();

                $('.button-rgb').css('border-top-color', topColor);
                $('.button-rgb').css('border-right-color', rightColor);
                $('.button-rgb').css('border-bottom-color', bottomColor);
                $('.button-rgb').css('border-left-color', leftColor);
            }, 200);
        });
        @* $(document).ready(function () {
            setInterval(() => {
            $('').css('background-color', generateRandomRGB());
            }, 1000);
            });*@
    </script>
    <script src="https://cdn.datatables.net/1.12.1/js/jquery.dataTables.min.js"></script>
    <!-- <script src="assets/js/owner-script.js"></script> -->

    <script src="~/js/user-script.js"></script>
    <script>
        $(document).ready(function () {
            $("#notification-table").DataTable({
                pagingType: "full_numbers",
            });
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
