@page "/Student/Class/{classId}/Info"
@model CEG_RazorWebApp.Pages.Student.Class.ClassInfoModel
@{
    ViewData["Title"] = "Student Class Info Page";
    string? search = string.Empty;
    Layout = "~/Pages/Shared/_SLayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Student/Class/Info">Class</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div class="card">
                        <div class="card-body">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs">
                                <!-- dung vong for o day -->
                                <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="#home1">
                                        <i class='bx bx-home-alt-2'></i>
                                        <span>All Classes</span>
                                    </a>
                                </li>
                            </ul>
                            <div id="alertContainer"></div>
                            <div class="row">
                                <div class="card profile col-12 mb-4">
                                    <div class="card-header" id="class-allow-add-schedule">
                                        <h4>Scheduled Session List</h4>
                                    </div>
                                    <div class="card-body" id="schedule_list">
                                        @* <h5>No scheduled session found</h5> *@
                                        <div id="schedule-table_wrapper" class="dataTables_wrapper no-footer">
                                            <table id="schedule-table"
                                                   class="table table-striped table-bordered dataTable no-footer compact"
                                                   aria-describedby="schedule-table_info">
                                                <thead>
                                                    <tr>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Number: activate to sort column ascending">
                                                            Number
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Session Title: activate to sort column ascending">
                                                            Session Title
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Date: activate to sort column ascending">
                                                            Date
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Start Time: activate to sort column ascending">
                                                            Start Time
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="End Time: activate to sort column ascending">
                                                            End Time
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="schedule-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Status: activate to sort column ascending">
                                                            Status
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Hours: activate to sort column ascending">
                                                            Session Hours
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="session-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Schedule Id: activate to sort column ascending">
                                                            Schedule Id
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="card-body" id="student_list" style="display: none; overflow: hidden;">
                                        @* <h5>No scheduled session found</h5> *@
                                        <div id="student-table_wrapper" class="dataTables_wrapper no-footer">
                                            <table id="student-table"
                                                   class="table table-striped table-bordered dataTable no-footer compact"
                                                   aria-describedby="student-table_info">
                                                <thead>
                                                    <tr>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="student-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Student ID: activate to sort column ascending">
                                                            Student ID
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="student-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Student Name: activate to sort column ascending">
                                                            Student Name
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="student-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Attendance: activate to sort column ascending">
                                                            Attendance
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="student-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Homework Progress: activate to sort column ascending">
                                                            Homework Progress
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class="card-body" id="student_homework_list" style="display: none; overflow: hidden;">
                                        @* <h5>No scheduled session found</h5> *@
                                        <div id="homework-table_wrapper" class="dataTables_wrapper no-footer">
                                            <table id="homework-table"
                                                   class="table table-striped table-bordered dataTable no-footer compact"
                                                   aria-describedby="homework-table_info">
                                                <thead>
                                                    <tr>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="homework-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Homework Number: activate to sort column ascending">
                                                            Homework Number
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="homework-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Homework Name: activate to sort column ascending">
                                                            Homework Name
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="homework-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Points: activate to sort column ascending">
                                                            Points
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="homework-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Status: activate to sort column ascending">
                                                            Status
                                                        </th>
                                                        <th class="sorting sorting_asc" tabindex="0"
                                                            aria-controls="homework-table" rowspan="1"
                                                            colspan="1" aria-sort="ascending"
                                                            aria-label="Options: activate to sort column ascending">
                                                            Options
                                                        </th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @* <div class="card-body" id="student_homework_list">
                                    <div id="student-homework-table_wrapper" class="dataTables_wrapper no-footer">
                                    <table id="student-homework-table"
                                    class="table table-striped table-bordered dataTable no-footer compact"
                                    aria-describedby="student-homework-table_info">
                                    <thead>
                                    <tr>
                                    <th class="sorting sorting_asc" tabindex="0"
                                    aria-controls="student-homework-table" rowspan="1"
                                    colspan="1" aria-sort="ascending"
                                    aria-label="Homework ID: activate to sort column ascending">
                                    Homework ID
                                    </th>
                                    <th class="sorting sorting_asc" tabindex="0"
                                    aria-controls="student-homework-table" rowspan="1"
                                    colspan="1" aria-sort="ascending"
                                    aria-label="Homework name: activate to sort column ascending">
                                    Homework Name
                                    </th>
                                    <th class="sorting sorting_asc" tabindex="0"
                                    aria-controls="student-homework-table" rowspan="1"
                                    colspan="1" aria-sort="ascending"
                                    aria-label="Score: activate to sort column ascending">
                                    Score
                                    </th>
                                    </tr>
                                    </thead>
                                    <tbody>
                                    </tbody>
                                    </table>
                                    </div>
                                    </div> *@
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    
    <script>
        var id = sessionStorage.getItem('usrId');
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var enrollTable;
        var attendanceTable;
        var scheduleTable;
        let selectedRow;
        let isTableDataEmpty = false; // To track if response data is empty
        let isHomeworkTableDataEmpty = false; // To track if response data is empty
        let hideTableTimer = null; // Timer to handle delayed table hiding
        let hideAttendanceTableTimer = null; // Timer to handle delayed table hiding
        let isTableVisible = false; // Track the table visibility status
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            DataTable.render.time = function ({ includeId = "schedule-start-time" }) {
                return function (data, type, row) {
                    var str = moment(data, "HH:mm:ss");
                    // console.log(str);
                    if (type === 'display') {
                        return '<span id="' + includeId + '">' + str.format("hh:mm A") + '</span >';
                    }

                    // Search, order and type can use the original data
                    return str;
                };
            };
            enrollTable = new DataTable('#enroll-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'enrollId' },
                    { data: 'student.account.fullname' },
                    // { data: 'status' },
                    // { Add a select box in the last column
                    //     data: 'status',
                    //     render: function (data, type, row, meta) {
                    //         return `
                    //                     <select class="custom-select form-control enroll-status" data-enrollid="${row.enrollId}">
                    //                     `
                    //             + getEnrollStatusOptions(data) +
                    //             `
                    //                     </select>
                    //                     `;
                    //     }
                    // }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search enroll...'
                        },
                        searchIcon: {
                        }
                    }
                }
            });
            callApiGetClassDetail();
            scheduleTable = new DataTable('#schedule-table', {
                data: [],
                lengthMenu: [5, 10, 25, 50],
                pageLength: 5,
                deferRender: false,
                responsive: true,
                columns: [
                    {
                        data: 'scheduleNumber',
                        className: 'dt-head-left'
                    },
                    {
                        data: 'session.title'
                    },
                    {
                        data: 'scheduleDate',
                        render: DataTable.render.date("dddd, DD/MM/YYYY"),
                        className: 'dt-head-left'
                    },
                    {
                        data: 'startTime',
                        render: DataTable.render.time({ includeId: "schedule-start-time" })
                    },
                    {
                        data: 'endTime',
                        render: DataTable.render.time({ includeId: "schedule-end-time" })
                    },
                    {
                        data: 'status'
                    },
                    {
                        data: 'session.hours'
                    },
                    {
                        data: 'scheduleId'
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'search info...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'single'
                },
            }).on('draw', function (e, settings) {
                scheduleTable.column(6).visible(false, false);
                scheduleTable.column(7).visible(false, false);

                // updateScheduleStatuses();
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Clear any pending hide action
                    if (hideTableTimer) {
                        clearTimeout(hideTableTimer);
                        hideTableTimer = null;
                    }
                    const rowScheduleId = dt.row(indexes[0]).data().scheduleId;
                    callApiGetAttendanceList(rowScheduleId);

                    // Ensure the target table is visible
                    if (!isTableVisible) {
                        $('#student_list').stop(true, true).slideDown(300);
                        isTableVisible = true;
                    }
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Set a short timer to delay hiding the table
                    hideTableTimer = setTimeout(() => {
                        const selectedRows = dt.rows({ selected: true }).count();

                        // Only hide the table if no rows are selected
                        if (selectedRows === 0 && isTableVisible) {
                            $('#student_list').stop(true, true).slideUp(300);
                            attendanceTable.clear().draw();
                            isTableVisible = false;
                        }
                    }, 50);
                }
            });
            // Set up the timer to frequently check the current time
            setInterval(() => {
                // updateScheduleStatuses(); // Function to update rows
            }, 5000); // Check every 5 seconds (5000ms). Adjust interval as needed.


                // $('#student-table')
                // .on('click', '.attendance-checkbox', function (e) {
                //     e.stopPropagation(); Prevent the click event from bubbling up to the row
                // })
                // .on('change', '.attendance-checkbox', function () {
                //     const attendanceId = $(this).data('attendance-id');
                //     const isChecked = $(this).is(':checked');
                //     const status = isChecked ? 'Attended' : 'Absent';

                //     const node = $(this).parent();

                //     Update the data or call API
                //     callApiUpdateAttendanceStatus(attendanceId, status); Call your API or update logic here
                //     if (node.children('label').length > 0) {
                //         const label = node.children('label');
                //         label.text(status);
                //     }
                // });
                // $('#student-table').on('click', '.attendance-checkbox-label', function (e) {
                //     e.stopPropagation(); Prevent the click event from bubbling up to the row
                // });
            }).on('user-select', function (e, dt, type, cell, originalEvent) {
                // Prevent row selection when clicking on the checkbox or label
                if ($(originalEvent.target).is('input.attendance-checkbox, label.custom-control-label')) {
                    e.preventDefault();
                }
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Clear any pending hide action
                    if (hideAttendanceTableTimer) {
                        clearTimeout(hideAttendanceTableTimer);
                        hideAttendanceTableTimer = null;
                    }
                    // const rowScheduleId = dt.row(indexes[0]).data().scheduleId;
                    // callApiGetAttendanceList(rowScheduleId);
                    // if (!$('#student_list').is(':visible')) {
                    //     $('#student_list').stop(true, true).slideDown(400); Slide down to show the table
                    // }
                    // Ensure the target table is visible
                    // if (!isTableDataEmpty) {
                    //     $('#student_list').stop(true, true).slideDown(400); Slide down to show the table
                    // }
                    // console.log(selectedRows);

                    const studentDetails = dt.row(indexes[0]).data();// .studentProgress.studentHomeworks;
                    // console.log(studentDetails);
                    if (studentDetails &&
                        studentDetails.studentProgress &&
                        studentDetails.studentProgress.studentHomeworks &&
                        studentDetails.studentProgress.studentHomeworks.length > 0) {
                        isHomeworkTableDataEmpty = false;
                        // console.log(studentDetails.studentProgress);
                        homeworkTable.clear().rows.add(studentDetails.studentProgress.studentHomeworks).draw();
                    } else {
                        isHomeworkTableDataEmpty = true;
                        homeworkTable.clear().draw();
                    }

                    // Ensure the target table is visible
                    if (!isHomeworkTableVisible) {
                        $('#student_homework_list').stop(true, true).slideDown(300);
                        isHomeworkTableVisible = true;
                    }

                    // const row = dt.row(indexes[0]);

                    // console.log(row);

                    // if (row.child.isShown()) {
                    //     row.child.hide();
                    //     tr.removeClass('shown');
                    // } else {
                    //     row.child(formatAttendance(row.data())).show();
                    //     tr.addClass('shown');
                    // }

                    // indexes.forEach(function (rowIdx) {
                    //     var data = dt.row(rowIdx).data();
                    //     const scheduleId = dt.row(rowIdx).data().scheduleId;
                    //     callApiGetAttendanceList(scheduleId);
                    //     Check if the target table is not empty
                    //     if (targetTable.data().any()) {
                    //         Animate slide down to reveal the target table
                    //         $('#student_list').stop(true, true).slideDown(400); Adjust duration as needed
                    //     }
                    // });
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Check if there are still any selected rows
                    // const selectedRows = dt.rows({ selected: true }).count();
                    // if (selectedRows === 0) {
                    //     attendanceTable.clear().draw();
                    //     Slide up to hide the table if no rows are selected
                    //     $('#student_list').stop(true, true).slideUp(400);
                    // }
                    // Only hide the table if no rows are selected
                    // if(selectedRows === 0 && ){
                    //     dt.clear().draw();
                    //     isTableDataEmpty = true;
                    // }
                    // Set a short timer to delay hiding the table
                    hideAttendanceTableTimer = setTimeout(() => {
                        const selectedRows = dt.rows({ selected: true }).count();

                        // Only hide the table if no rows are selected
                        if (selectedRows === 0 && isHomeworkTableVisible) {
                            $('#student_homework_list').stop(true, true).slideUp(300);
                            isHomeworkTableVisible = false;
                        }
                    }, 50); // Short delay to ensure the `select` event has been triggered if applicable
                    // if (selectedRows === 0) {
                    //     dt.clear().draw();
                    //     $('#student_list').stop(true, true).slideUp(400); Slide up to hide the table
                    // }
                    // indexes.forEach(function (rowIdx) {
                    //     Animate slide up to hide the target table
                    //     attendanceTable.clear().draw();
                    //     Check if the target table is not empty
                    //     if (!targetTable.data().any()) {
                    //         Animate slide down to reveal the target table
                    //         $('#student_list').stop(true, true).slideUp(400); Adjust duration as needed
                    //     }
                    // });
                }
            });

        /**
        * Renders the status dropdown in the specified row cell.
        */
        function renderStatusDropdown(row, rowIdx, currentStatus, scheduleId) {
            const node = $(row.cell(rowIdx, 5).node());

            // Avoid re-rendering if the dropdown already exists
            if (!node.children('select').length) {
                node.html(`
                            <select class="custom-select schedule-status" id="schedule-status-${rowIdx}">
                                ${getScheduleStatusOptions(currentStatus)}
                            </select>
                        `);

                // Add a new class to the node
                node.addClass('custom-select-cell');

                // Add change event listener to the select element
                node.find('select')
                    .off('click  change')
                    .on('click', function (e) {
                        e.stopPropagation(); // Prevent row selection when checkbox is clicked
                    })
                    .on('change', function () {
                        const newStatus = $(this).val();
                        callApiUpdateScheduleStatus(scheduleId, newStatus);
                    });
            }
        }
        function getScheduleDateBasedOnTodayOrDefault(defaultRowIdx) {
            // Get today's date in the desired format
            const today = moment().startOf('day'); // Format based on your data

            // Get the page length (number of rows per page)
            const pageLength = scheduleTable.page.len();

            // Initialize variables to track the closest date and its row index
            let closestDate = null;
            let closestRowIndex = -1;

            // Loop through all rows to find today's date or the closest previous date
            scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                const dateInRow = moment(this.cell(rowIdx, 2).data()); // Adjust format to match your table data
                if (dateInRow.isValid()) {
                    if (dateInRow.isSame(today)) {
                        // If today's date matches exactly, select this row
                        closestDate = dateInRow;
                        closestRowIndex = rowIdx;
                        return false; // Stop searching
                    } else if (dateInRow.isBefore(today)) {
                        // If the date is before today, check if it's the closest one
                        if (!closestDate || dateInRow.isAfter(closestDate)) {
                            closestDate = dateInRow;
                            closestRowIndex = rowIdx;
                        }
                    }
                }
            });

            // If a matching or closest date row is found
            if (closestRowIndex !== -1) {
                // Calculate the page number
                const pageNumber = Math.floor(closestRowIndex / pageLength);

                // Navigate to the page containing the row
                scheduleTable.page(pageNumber).draw(false);

                // Select the row
                scheduleTable.row(closestRowIndex).select();
                // console.log(`Selected row with date: ${closestDate.format("MM/DD/YYYY")}`);
            } else if (defaultRowIdx !== undefined) {
                scheduleTable.row(defaultRowIdx).select(); // Re-select the row by its index
                // console.log("No row found with today's date or any previous date.");
            } else {
                attendanceTable.clear().draw();
            }
        }
        // Function to get the currently selected row's data and index
        function getSelectedRowInfo() {
            const selectedRows = scheduleTable.rows({ selected: true });
            if (selectedRows.count() > 0) {
                const rowIndex = selectedRows.indexes()[0]; // Get the index of the first selected row
                const rowData = selectedRows.data()[0]; // Get the data of the first selected row
                return { rowIndex, rowData };
            }
            return null; // No row is selected
        }
        
        function callApiGetClassDetail() {
            $.ajax({
                url: apiUrl + 'Class/Student/@Model.ClassID', // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        // console.(log(response.data);
                        setClassDisplay(response.data);
                        // Check if homeworkAnswers is empty
                        if (response.data.enrolls && response.data.enrolls.length > 0) {
                            enrollTable.clear().rows.add(response.data.enrolls).draw();
                        }
                        if (response.data.schedules && response.data.schedules.length > 0) {
                            selectedRow = getSelectedRowInfo();
                            // console.log(response.data.schedules);
                            scheduleTable.clear().rows.add(response.data.schedules).draw();
                            if (selectedRow == null)
                                getScheduleDateBasedOnTodayOrDefault(selectedRow != null ? selectedRow.rowIndex : 1);
                        }
                        // console.log(response.data);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function setClassDisplay(data) {
            var filteredEnrollList = data.enrolls.filter(function (enroll) {
                return enroll.status === 'Enrolled';
            });

            

            // Display Class Info
            // $('#class-title-status').find('#class-class-status').remove();
            $('#class-status').empty();
            $('select[id="updateClassStatus_Status"]').empty();
            $('#class-status').append(statusText);
            $('#class-id').text(data.classId);
            $('#class-class-title').text('Class ' + data.className + ' Infomations');
            // $('#class-name').text(data.className);
            $('#class-course').text(data.course.courseName);
            $('#class-start-date').text(formatDate(data.startDate, { ignoreHour: true }));
            $('#class-end-date').text(formatDate(data.endDate, { ignoreHour: true }));
            $('#class-schedules-amount').text(data.schedules.length + ' Scheduled Session(s)');
        }
    </script>
</body>
</html>
