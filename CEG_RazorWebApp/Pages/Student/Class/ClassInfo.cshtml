@page "/Student/Class/{classId}/Info"
@model CEG_RazorWebApp.Pages.Student.Class.ClassInfoModel
@{
    ViewData["Title"] = "Admin Class Info Page";
    string? search = string.Empty;
    Layout = "~/Pages/Shared/_SLayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Student/Class/@Model.ClassID/Info">@Model.ClassID</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Student/Class/@Model.ClassID/Info">Info</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="row">
                    <div class="col-lg-7 customer-booking">
                        <div class="row">
                            <div class="card profile col-12 mb-4">
                                <div class="card-header" id="class-title-status">
                                    <h4>Class <label id="class-class-title" class="truncate"></label> Information</h4>
                                </div>
                                <div id="alertContainer"></div>
                                <div class="card-body">
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Class ID:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-id">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Status:</label>
                                        </div>
                                        <div class="col-sm-7" id="class-status">
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Class Name:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-name">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Course information:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <a id="class-course">
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Assigned Teacher:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <a id="class-teacher">
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Start Date:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-start-date">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">End Date:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-end-date">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Current students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-current-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Minimum students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-minimum-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Maximum students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-maximum-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    @* <div class="row mb-sm-2">
                                    <div class="col-md-5 text-md-right">
                                    <label class="col-form-label">Enroll requests amount:</label>
                                    </div>
                                    <div class="col-md-7">
                                    <span id="class-enrolls-amount">
                                    </span>
                                    </div>
                                    </div> *@
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Scheduled sessions amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-schedules-amount">
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card profile col-12 mb-4">
                                <div class="card-header" id="class-allow-add-schedule">
                                    <h4>Scheduled Session List</h4>
                                </div>
                                <div class="card-body" id="schedule_list">
                                    <h5>No scheduled session found</h5>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-5 cardFB">
                        <div class="card profile">
                            <div class="card-header">
                                <h4>Enroll requests</h4>
                            </div>
                            <div class="card-body">
                                <div id="enroll-table_wrapper" class="dataTables_wrapper no-footer">
                                    <table id="enroll-table"
                                           class="table table-striped table-bordered dataTable no-footer"
                                           aria-describedby="enroll-table_info">
                                        <thead>
                                            <tr>
                                                <th class="sorting sorting_asc" tabindex="0"
                                                    aria-controls="enroll-table" rowspan="1"
                                                    colspan="1" aria-sort="ascending"
                                                    aria-label="Request ID: activate to sort column ascending">
                                                    Request ID
                                                </th>
                                                <th class="sorting sorting_asc" tabindex="0"
                                                    aria-controls="enroll-table" rowspan="1"
                                                    colspan="1" aria-sort="ascending"
                                                    aria-label="Student Name: activate to sort column ascending">
                                                    Student Name
                                                </th>
                                                <th class="sorting sorting_asc" tabindex="0"
                                                    aria-controls="enroll-table" rowspan="1"
                                                    colspan="1" aria-sort="ascending"
                                                    aria-label="Status: activate to sort column ascending">
                                                    Status
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="changeClassStatus" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content modal-addRoom">
                <div class="modal-header">
                    <h4 class="modal-title">Update Class Status</h4>
                </div>
                <form method="post" id="updateClassStatusForm">
                    <div class="modal-body">
                        <div class="row p-4">
                            <div class="col-12">
                                <div class="row form-group">
                                    <label for="updateClassStatus_Status" class="col-md-3 col-form-label mt-3 text-md-right">New Status (this action cannot be undone!)</label>
                                    <select class="form-control col-md-7 custom-select" id="updateClassStatus_Status"></select>
                                    @* <span asp-validation-for="@updateClass.Status" id="error_message"
                                    class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span> *@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer justify-content-center">
                        <button class="btn btn-success" type="submit">Update</button>
                        <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    @* <div id="createSchedule" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
    <div class="modal-content modal-addRoom">
    <div class="modal-header">
    <h4 class="modal-title">Add new Homework Answer</h4>
    </div>
    <form method="post" id="createAnswerForm">
    <div class="modal-body">
    <div class="row p-4">
    <div class="col-12">
    <div class="row form-group">
    <label asp-for="@createAnswer.Answer" class="col-md-4 col-form-label text-md-right"></label>
    <textarea asp-for="@createAnswer.Answer" value="@createAnswer.Answer" required class="col-md-8 form-control"></textarea>
    <span asp-validation-for="@createAnswer.Answer" id="error_message"
    class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>
    </div>
    <div class="row form-group">
    <label asp-for="@createAnswer.Type" class="col-md-4 col-form-label text-md-right"></label>
    <select class="col-md-8 form-control custom-select" asp-for="@createAnswer.Type"></select>
    <span asp-validation-for="@createAnswer.Type" id="error_message"
    class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

    <input asp-for="@createAnswer.QuestionId" value="@Model.QuestionId" type="text" required hidden readonly>
    </div>
    </div>
    </div>
    </div>
    <div class="modal-footer justify-content-center">
    <button class="btn btn-success" type="submit" name="action" value="createAnswer">Create</button>
    <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
    </div>
    </form>
    </div>
    </div>
    </div> *@
    <script>
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var enrollList;
        var table;
        var sessionTable;
        var scheduleTable;
        var selectedSessionIds = new Set();
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return container;
            });
            table = new DataTable('#enroll-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'enrollId' },
                    { data: 'student.account.fullname' },
                    // { data: 'status' },
                    { // Add a select box in the last column
                        data: null, // No need to map it to a specific data field
                        render: function (data, type, row, meta) {
                            getEnrollStatusOptions(row.status);
                            // Customize the select box based on your needs
                            //<option value="enrolled" ${row.status === 'enrolled' ? 'selected' : ''}>Enrolled</option>
                            //<option value="pending" ${row.status === 'pending' ? 'selected' : ''}>Pending</option>
                            return `
                                        <select class="custom-select form-control enroll-status" data-enrollid="${row.enrollId}">
                                        `
                                + getEnrollStatusOptions(row.status) +
                                `
                                        </select>
                                        `;
                        }
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search enroll...'
                        },
                        searchIcon: {
                        }
                    }
                }
            });
            sessionTable = new DataTable('#session-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'sessionId' },
                    { data: 'sessionNumber' },
                    { data: 'title' },
                    { data: 'description' }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'type session title...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'multi'
                }
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = sessionTable
                        .row(indexes)
                        .data();
                    // console.log(data);
                    var sessionId = data.sessionId;
                    // If not selected, add to selected set and add to scheduleTable
                    selectedSessionIds.add(sessionId);
                    var startDateTime = getDefaultDate();
                    var endDateTime = new Date(startDateTime);
                    endDateTime.setHours(endDateTime.getHours() + data.hours);
                    // Create a new row data for scheduleTable based on selected sessionTable row
                    var newRowData = { // Customize if needed, or leave empty for manual input
                        sessionNumber: data.sessionNumber,
                        title: data.title,
                        startDate: startDateTime,
                        hour: data.hours,
                        endDate: endDateTime
                    };

                    // Add new row data to scheduleTable
                    scheduleTable.row.add(newRowData).draw();
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    var data = sessionTable
                        .row(indexes)
                        .data();
                    // console.log(data);
                    var sessionId = data.sessionId;
                    // If already selected, unselect and remove from scheduleTable
                    selectedSessionIds.delete(sessionId);

                    // Find and remove the row with the same sessionId in scheduleTable
                    scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                        if (this.data().sessionNumber === data.sessionNumber) {
                            scheduleTable.row(rowIdx).remove();
                        }
                    });
                    scheduleTable.draw(); // Re-render table after removal
                }
            });

            scheduleTable = new DataTable('#schedule-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'sessionNumber' },
                    { data: 'title' },
                    { // Add a select box in the last column
                        data: 'startDate', // No need to map it to a specific data field
                        render: function (data, type, row, meta) {
                            return '<input type="datetime-local" id="schedule-start-date" class="form-control" value="' + data + '" />';
                        }
                    },
                    {
                        data: 'hour',
                        render: function (data, type, row, meta) {
                            return '<span id="schedule-hour">' + data + '</span >';
                        }
                    },
                    {
                        data: 'endDate',
                        render: function (data, type, row, meta) {
                            return '<span id="schedule-end-date">' + formatDate(data) + '</span >';
                        }
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'type session title...'
                        },
                        searchIcon: {
                        }
                    }
                },
            }).on('draw', function () {
                // Select all datetime-local inputs within the table
                // console.log( $('#schedule-table').find('input[type="datetime-local"]#schedule-start-date'));
                $('#schedule-table').find('input[type="datetime-local"]#schedule-start-date').each(function () {
                    // Add change event listener for each input
                    $(this).on('change', function () {
                        const selectedDate = new Date(this.value);
                        var rowData = $(this).closest('tr');
                        let hourText = rowData.find('#schedule-hour');
                        let endDateText = rowData.find('#schedule-end-date');
                        if (hourText && hourText.length > 0 && endDateText && endDateText.length > 0) {
                            console.log(hourText[0].textContent);
                            const hoursToAdd = parseFloat(hourText[0].textContent);
                            const endDate = new Date(selectedDate);
                            endDate.setHours(endDate.getHours() + hoursToAdd);
                            // Format and display the end date in the corresponding span
                            const formattedEndDate = formatDate(endDate); // Format as needed
                            endDateText.text(formattedEndDate);
                        }
                    });
                });
            });

            $('#searchableCourseDropdown').select2({
                placeholder: 'Select a course name',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
                .on('select2:close', function (e) {
                    console.log(e);
                    var text = $('#searchableCourseDropdown').select2('data')[0].text;
                    // Filter options based on the search input
                    var results = courseList.filter(function (item) {
                        return item.courseName && item.courseName === text;
                    });

                    if (results.length > 0 && results[0].sessions) {
                        sessionTable.clear().rows.add(results[0].sessions).draw();
                        scheduleTable.clear().draw();
                    } else {
                        console.error('Selected course or its sessions not found.');
                        sessionTable.clear().draw();
                        scheduleTable.clear().draw();
                    }
                })
                ;

            $('#searchableTeacherDropdown').select2({
                placeholder: 'Select a teacher name',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
            callApiGetClassDetail();
            $('#editClassForm').submit(function (event) {
                event.preventDefault(); // Prevent the form from submitting normally

                //Get the form data
                var formData = {
                    question: $('textarea[id="updateQuestion_Question"]').val()
                };

                //Make the AJAX request
                callApiPutUpdateClass(formData);
                $('#editClassForm').trigger("reset");
            });
            // $('#createAnswerForm').submit(function (event) {
            //     event.preventDefault(); Prevent the form from submitting normally

            //     Get the form data
            //     var formData = {
            //         answer: $('textarea[id="createAnswer_Answer"]').val(),
            //         type: $('select[id="createAnswer_Type"]').val(),
            //         questionid: $('input[id="createAnswer_QuestionId"]').val()
            //     };

            //     Make the AJAX request
            //     callApiPostCreateAnswer(formData);
            //     $('#createAnswerForm').trigger("reset");
            // });
            $('#updateClassStatusForm').submit(function (event) {
                event.preventDefault(); // Prevent the form from submitting normally

                //Make the AJAX request
                callApiPutUpdateClassStatus($('select[id="updateClassStatus_Status"]').val());
                $('#updateClassStatusForm').trigger("reset");
            });
            $(document).on('submit', 'form[id^="editScheduleForm_"]', function (event) {
                event.preventDefault();
                // Extract the answerId from the form's id
                let answerId = $(this).attr('id').split('_')[1];

                // Collect form data
                let formData = {
                    answer: $('#updateAnswer_' + answerId + '_Answer').val(),
                    type: $('#updateAnswer_' + answerId + '_Type').val()
                };

                // Call the API to update the answer
                callApiPutUpdateSchedule(formData, answerId);

                // Optionally reset the form
                //$(this).trigger("reset");
            });
        });
        function renderDefaultCourse(data) {
            // var text = $('#searchableCourseDropdown').select2('data')[0].text;
            // Filter options based on the search input
            var results = data[0]

            if (results && results.sessions) {
                sessionTable.clear().rows.add(results.sessions).draw();
            } else {
                console.error('Selected course or its sessions not found.');
                sessionTable.clear().draw();
            }
        }
        function addTeacherOptions(data, baseTeacher) {
            data.forEach(item => {
                // Add each item as an option=
                let newOption = new Option(item, item, false, false);
                if (item === baseTeacher) {
                    newOption = new Option(item, item, true, true);
                }
                $('#searchableTeacherDropdown').append(newOption);
            });
            // Refresh the Select2 dropdown to show new options
            $('#searchableTeacherDropdown').trigger('change'); // Ensure Select2 is updated
        }
        function addCourseOptions(data, baseCourse) {
            data.forEach(item => {
                // Add each item as an option
                let newOption = new Option(item.courseName, item.courseName, false, false);
                if (item.courseName === baseCourse) {
                    newOption = new Option(item.courseName, item.courseName, true, true);
                }
                $('#searchableCourseDropdown').append(newOption);
            });
            // Refresh the Select2 dropdown to show new options
            $('#searchableCourseDropdown').trigger('change'); // Ensure Select2 is updated
        }
        // Function to calculate today's date + 10 days
        function getDefaultDate() {
            var defaultDate = new Date();
            defaultDate.setDate(defaultDate.getDate() + 10);
            return defaultDate.toISOString().slice(0, 16); // Format as 'YYYY-MM-DDTHH:MM'
        }
        $(document).on('change', '.enroll-status', function () {
            var enrollId = $(this).data('enrollid');
            var newStatus = $(this).val();
            callApiUpdateEnrollStatus(enrollId, newStatus);
        });
        function callApiUpdateEnrollStatus(enrollId, newStatus) {
            $.ajax({
                url: apiUrl + `Enroll/${enrollId}/Update/Status`, // API endpoint for updating status
                type: 'PUT', // HTTP method PUT for updates
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(newStatus), // Data sent in the request body data: JSON.stringify({ status: newStatus.toString() }),
                success: function (response) {
                    if (response.status) {
                        callApiGetClassDetail();
                        showAlert('success', 'Student enrollment status updated');
                    } else {
                        showAlert('error', 'Failed to update status. Error: ' + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
        }
        // Function to display alerts
        function showAlert(type, message) {
            var alertHtml = '';

            if (type === 'success') {
                alertHtml = `
                                <div class="alert alert-success alert-dismissible fade show" id="notif">
                                    <i class='bx bx-message-alt-x p-1'></i>
                                    <strong class="mr-1">` + message + `</strong>
                                    <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                        <span><i class='bx bx-x'></i></span>
                                    </button>
                                </div>
                            `;
            } else if (type === 'error') {
                alertHtml = `
                                <div class="alert alert-danger alert-dismissible fade show" id="notif">
                                    <i class='bx bx-message-alt-x p-1'></i>
                                    <strong class="mr-1">` + message + `</strong>
                                    <button type="button" class="close h-100" data-dismiss="alert" aria-label="Close">
                                        <span><i class='bx bx-x'></i></span>
                                    </button>
                                </div>
                            `;
            }

            // Inject the alert HTML into the alert container
            $('#alertContainer').html(alertHtml);
        }
        function callApiPutUpdateClass(formData) {
            $.ajax({
                url: apiUrl + 'Class/@Model.ClassID/Update', // Specify your Razor Page here
                type: 'PUT',
                data: JSON.stringify(formData),
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    // Handle success (display a success message or redirect, etc.)
                    if (response.status) {
                        showAlert('success', "Class update successfully");
                        callApiGetClassDetail();
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
        }
        function callApiPutUpdateSchedule(formData, answerId) {
            $.ajax({
                url: apiUrl + 'Answer/' + answerId + '/Update', // Specify your Razor Page here
                type: 'PUT',
                data: JSON.stringify(formData),
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    // Handle success (display a success message or redirect, etc.)
                    if (response.status) {
                        showAlert('success', "Answer update successfully");
                        $('.modal-backdrop').remove();
                        // Remove specific class from body
                        $('body').removeClass('modal-open');

                        // Remove all inline styles from body
                        $('body').removeAttr('style');
                        callApiGetClassDetail();
                        showAlert('', '');
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
        }
        // function callApiPostCreateAnswer(formData){
        //     $.ajax({
        //         url: apiUrl + 'Answer/Create', Specify your Razor Page here
        //         type: 'POST',
        //         data: JSON.stringify(formData),
        //         headers: {
        //             'Authorization': 'Bearer ' + token, Token for authentication
        //         },
        //         contentType: 'application/json; charset=utf-8',
        //         success: function (response) {
        //             Handle success (display a success message or redirect, etc.)
        //             if (response.status) {
        //                 showAlert('success',"Answer create successfully");
        //                 callApiGetClassDetail();
        //                 showAlert('','');
        //             } else {
        //                 console.error("API returned false status.");
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             Handle error (display the validation message, etc.)
        //             alert("Error in api call:" + error);
        //             console.error("Error in api call:", error);
        //         }
        //     });
        // }
        function callApiGetClassDetail() {
            $.ajax({
                url: apiUrl + 'Class/@Model.ClassID', // API endpoint
                type: 'GET',
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        console.log(response.data);
                        setClassDisplay(response.data);
                        // Check if homeworkAnswers is empty
                        if (response.data.enrolls && response.data.enrolls.length > 0) {
                            table.clear().rows.add(response.data.enrolls).draw();
                        }
                        if (response.data.schedules && response.data.schedules.length > 0) {
                            // Clear any existing answers
                            $('#schedule_list').empty();

                            // Loop through each answer and generate the HTML
                            // response.data.homeworkAnswers.forEach(function (answer) {
                            //     let answerHtml = generateAnswerHtml(answer,response.data.courseStatus); Assuming both answerInfo and updateAnswer are the same structure
                            //     $('#schedule_list').append(answerHtml);
                            // });
                        } else {
                            // If the answer list is empty
                            $('#schedule_list').html('<h5>No schedules found</h5>');
                        }
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
        }
        // function generateScheduleHtml(answerInfo,status) {
        //     var scheduleUpdateToggleHtml = status === 'Draft' || status === 'Postponed' || status === 'NotFound' ? `
        //         <div class="edit-info">
        //             <i class='bx bxs-edit bx-sm' data-toggle="modal" data-target="#editanswer_${answerInfo.homeworkAnswerId}"></i>
        //         </div>
        //     ` : '';
        //     var scheduleUpdateHtml = status === 'Draft' || status === 'Postponed' || status === 'NotFound' ? `
        //         <div id="editanswer_${answerInfo.homeworkAnswerId}" class="modal fade" role="dialog">
        //             <div class="modal-dialog modal-dialog-centered modal-lg" role="content">
        //                 <div class="modal-content modal-addRoom">
        //                     <div class="modal-header">
        //                         <h4 class="modal-title truncate">Update Answer ${answerInfo.answer}</h4>
        //                     </div>
        //                     <form method="put" class="form-group" id="editAnswerForm_${answerInfo.homeworkAnswerId}">
        //                         <div class="modal-body">
        //                             <div class="col-12">
        //                                 <div class="form-group row">
        //                                     <label for="updateAnswer_${answerInfo.homeworkAnswerId}_Answer" class="col-sm-4 col-form-label">Answer</label>
        //                                     <div class="col-sm-8">
        //                                         <textarea id="updateAnswer_${answerInfo.homeworkAnswerId}_Answer" name="Answer" required class="form-control">${answerInfo.answer}</textarea>
        //                                         <span class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2" id="error_message"></span>
        //                                     </div>
        //                                 </div>
        //                                 <div class="form-group row">
        //                                     <label for="updateAnswer_${answerInfo.homeworkAnswerId}_Type" class="col-sm-4 col-form-label">Answer Type</label>
        //                                     <div class="col-sm-8">
        //                                         <select id="updateAnswer_${answerInfo.homeworkAnswerId}_Type" name="Type" class="form-control custom-select">
        //                                             ${getTypeOptions(answerInfo.type)}
        //                                         </select>
        //                                         <span class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2" id="error_message"></span>
        //                                     </div>
        //                                 </div>
        //                             </div>
        //                         </div>
        //                         <div class="modal-footer justify-content-center">
        //                             <button class="btn btn-success" type="submit" value="Update">Save</button>
        //                             <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
        //                         </div>
        //                     </form>
        //                 </div>
        //             </div>
        //         </div>
        //     ` : '';
        //     return `
        //     <div class="card-header">
        //         <h5>Answer <label class="truncate">${answerInfo.answer}</label> Details</h5>
        //         ` + answerUpdateToggleHtml + `
        //     </div>
        //     <div class="card-body">
        //         <div class="row mb-sm-2">
        //             <div class="col-md-5 text-md-right">
        //                 <label class="col-form-label">Answer ID:</label>
        //             </div>
        //             <div class="col-md-7">
        //                 <span>${answerInfo.homeworkAnswerId}</span>
        //             </div>
        //         </div>
        //         <div class="row mb-sm-2">
        //             <div class="col-sm-5 text-sm-right">
        //                 <label for="meeting-name">Answer:</label>
        //             </div>
        //             <div class="col-sm-7 text-sm-left">
        //                 <span>${answerInfo.answer}</span>
        //             </div>
        //         </div>
        //         <div class="row mb-sm-2">
        //             <div class="col-sm-5 text-sm-right">
        //                 <label for="meeting-name">Answer Type:</label>
        //             </div>
        //             <div class="col-sm-7 text-sm-left">
        //                 <span>${answerInfo.type}</span>
        //             </div>
        //         </div>
        //     </div>
        //     <hr class="container my-0">
        //     ` + answerUpdateHtml;
        // }
        function getStatusOptions(selectedStatus) {
            var options = ['Draft', 'Open', 'Postponed', 'Cancelled', 'Ended']; // Example statuses
            var html = '';
            switch (selectedStatus) {
                case 'Open':
                    options = ['Open', 'Postponed', 'Cancelled', 'Ended']
                    break;
                case 'Draft':
                    options = ['Draft', 'Open']
                    break;
                case 'Postponed':
                    options = ['Open', 'Postponed', 'Cancelled', 'Ended']
                    break;
                case 'Ended':
                    options = ['Open', 'Ended']
                    break;
                case 'Cancelled':
                    options = ['Open', 'Cancelled', 'Ended']
                    break;
            }
            options.forEach(function (status) {
                html += `<option value="${status}" ${selectedStatus === status ? 'selected' : ''} >${status}</option>`;
            });

            return html;
        }
        function getEnrollStatusOptions(selectedStatus) {
            var options = ['Pending', 'Enrolled', 'Suspended']; // Example statuses
            var html = '';
            switch (selectedStatus) {
                case 'Pending':
                    options = ['Pending', 'Enrolled']
                    break;
                case 'Enrolled':
                    options = ['Enrolled', 'Suspended']
                    break;
                case 'Suspended':
                    options = ['Suspended']
                    break;
            }
            options.forEach(function (status) {
                html += `<option value="${status}" ${selectedStatus === status ? 'selected' : ''} >${status}</option>`;
            });

            return html;
        }
        function callApiPutUpdateClassStatus(formData) {
            $.ajax({
                url: apiUrl + 'Class/' + @Model.ClassID + '/Update/Status', // Specify your Razor Page here
                type: 'PUT',
                data: JSON.stringify(formData),
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    // Handle success (display a success message or redirect, etc.)
                    if (response.status) {
                        showAlert('success', "Class Status update successfully");
                        callApiGetClassDetail();
                    } else {
                        showAlert('error', response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
        }
        function formatDate(date) {
            let d = new Date(date);

            // Get day, month, year
            let day = String(d.getDate()).padStart(2, '0');
            let month = String(d.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            let year = d.getFullYear();

            // Get hours, minutes
            let hours = String(d.getHours()).padStart(2, '0');
            let minutes = String(d.getMinutes()).padStart(2, '0');

            // Optionally, get seconds
            let seconds = String(d.getSeconds()).padStart(2, '0');

            // Return the formatted date and time as `dd/mm/yyyy hh:mm`
            return `${day}/${month}/${year} ${hours}:${minutes}`;

            // If you want to include seconds as well, use this return:
            // return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
        }

        function setClassDisplay(data) {
            var titleStatusHtml = data.status === 'Draft' || data.status === 'Postponed' ? `
                            <div class="edit-info" id="class-class-status">
                                <i class='bx bxs-adjust bx-sm' data-toggle="modal" data-target="#changeClassStatus"></i>
                                <i class='bx bxs-edit bx-sm' data-toggle="modal" data-target="#editClass"></i>
                            </div>
                            ` : '';
            var filteredEnrollList = data.enrolls.filter(function (enroll) {
                return enroll.status === 'Enrolled';
            });
            // Call API to get the list of teacher names
            $.ajax({
                url: apiUrl + 'Teacher/All/Fullname', // API endpoint
                type: 'GET',
                success: function (response) {

                    // Check if the status is true
                    if (response.status) {
                        addTeacherOptions(response.data, data.teacher.account.fullname);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function

                }
            });
            // Call API to get the list of course names
            $.ajax({
                url: apiUrl + 'Course/All/Available',// API endpoint
                type: 'GET',
                success: function (response) {

                    // Check if the status is true
                    if (response.status) {
                        courseList = response.data;
                        addCourseOptions(courseList, data.course.courseName);
                        renderDefaultCourse(courseList);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || "An unknown error occurred.";

                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error:" + errorMessage);
                }
            });
            var statusText = '';
            switch (data.status) {
                case 'Open':
                case 'Ongoing':
                    statusText = `<span class="outcome" style="float: left;">${data.status}</span>`
                    break;
                case 'Draft':
                case 'Postponed':
                    statusText = `<span class="approval" style="float: left;">${data.status}</span>`
                    break;
                case 'Ended':
                case 'Cancelled':
                    statusText = `<span class="destroy" style="float: left;">${data.status}</span>`
                    break;
            }
            // var answerAddHtml = data.status === 'Draft' || data.status === 'Postponed' ? `
            //     <div class="edit-info" id="question-add-answer">
            //         <i class='bx bxs-add-to-queue bx-sm' data-toggle="modal" data-target="#createAnswer"></i>
            //     </div>
            //     ` : '';
            $('#class-title-status').find('#class-class-status').remove();
            $('#class-status').empty();
            // $('#class-allow-add-').find('#class-add-answer').remove();
            $('#class-status').append(statusText);
            $('#class-id').text(data.classId);
            $('#class-class-title').text(data.className);
            $('#class-name').text(data.className);
            $('#class-teacher').text(data.teacher.account.fullname);
            $('#class-teacher').attr('href', `/Admin/Teacher/${data.teacher.accountId}/Info`);
            $('#class-course').text(data.course.courseName);
            $('#class-course').attr('href', `/Admin/Course/${data.course.courseId}/Info`);
            $('#class-start-date').text(formatDate(data.startDate));
            $('#class-end-date').text(formatDate(data.endDate));
            $('#class-current-students-amount').text(filteredEnrollList.length + ' Student(s)');
            $('#class-minimum-students-amount').text(data.minimumStudents);
            $('#class-maximum-students-amount').text(data.maximumStudents);
            $('#class-title-status').append(titleStatusHtml);
            // $('#question-allow-add-answer').append(answerAddHtml);
            $('#class-schedules-amount').text(data.schedules.length + ' Scheduled Session(s)');

            // $('#updateQuestion_Question').text(data.question);
            // $('#createAnswer_Type').append(getTypeOptions());
            $('input[id="updateClass_ClassName"]').val(data.className);
            $('input[id="updateClass_MinStudents"]').val(data.minimumStudents);
            $('input[id="updateClass_MaxStudents"]').val(data.maximumStudents);
            $('input[id="updateClass_StartDate"]').val(data.startDate);
            $('input[id="updateClass_EndDate"]').val(data.endDate);

            $('textarea[id="updateClass_Description"]').val(data.description);

        }
    </script>
</body>
</html>
