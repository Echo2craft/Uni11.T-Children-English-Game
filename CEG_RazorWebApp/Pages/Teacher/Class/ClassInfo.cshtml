@page "/Teacher/Class/{classId}/Info"
@model CEG_RazorWebApp.Pages.Teacher.Class.ClassInfoModel
@{
    ViewData["Title"] = "Teacher Class Info Page";
    Layout = "~/Pages/Shared/_TLayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div id="alertContainer"></div>
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Teacher/Class/Index">Class</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Teacher/Class/@Model.ClassID/Info">@Model.ClassID</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Teacher/Class/@Model.ClassID/Info">Info</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xl-12 customer-booking">
                        <div class="row">
                            <div class="card profile col-12 mb-4">
                                <div class="card-header" id="class-title-status">
                                    <h4 id="class-class-title">Class Information</h4>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Status:</label>
                                        </div>
                                        <div class="col-sm-7" id="class-status">
                                        </div>
                                    </div>
                                    @* <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Class Code:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-name">
                                            </span>
                                        </div>
                                    </div> *@
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Course information:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <a id="class-course">
                                            </a>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Start Date:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-start-date">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">End Date:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-end-date">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Enrollment Fee:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-enroll-fee">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Current students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-current-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Minimum students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-minimum-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Maximum students amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-maximum-students-amount">
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-sm-2">
                                        <div class="col-md-5 text-md-right">
                                            <label class="col-form-label">Scheduled sessions amount:</label>
                                        </div>
                                        <div class="col-md-7">
                                            <span id="class-schedules-amount">
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="card profile col-12 mb-4">
                                <div class="card-header" id="class-allow-add-schedule">
                                    <h4>Scheduled Session List</h4>
                                </div>
                                <div class="card-body" id="schedule_list">
                                    @* <h5>No scheduled session found</h5> *@
                                    <div id="schedule-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="schedule-table"
                                               class="table table-striped table-bordered dataTable no-footer compact"
                                               aria-describedby="schedule-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Number: activate to sort column ascending">
                                                        Number
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Session Title: activate to sort column ascending">
                                                        Session Title
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Date: activate to sort column ascending">
                                                        Date
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Start Time: activate to sort column ascending">
                                                        Start Time
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="End Time: activate to sort column ascending">
                                                        End Time
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="schedule-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Status
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="session-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Hours: activate to sort column ascending">
                                                        Session Hours
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="session-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Schedule Id: activate to sort column ascending">
                                                        Schedule Id
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="card-body" id="student_list" style="display: none; overflow: hidden;">
                                    @* <h5>No scheduled session found</h5> *@
                                    <div id="student-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="student-table"
                                               class="table table-striped table-bordered dataTable no-footer compact"
                                               aria-describedby="student-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Student ID: activate to sort column ascending">
                                                        Student ID
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Student Name: activate to sort column ascending">
                                                        Student Name
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Attendance: activate to sort column ascending">
                                                        Attendance
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Homework Progress: activate to sort column ascending">
                                                        Homework Progress
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                <div class="card-body" id="student_homework_list" style="display: none; overflow: hidden;">
                                    @* <h5>No scheduled session found</h5> *@
                                    <div id="homework-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="homework-table"
                                               class="table table-striped table-bordered dataTable no-footer compact"
                                               aria-describedby="homework-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Homework Number: activate to sort column ascending">
                                                        Homework Number
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Homework Name: activate to sort column ascending">
                                                        Homework Name
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Points: activate to sort column ascending">
                                                        Points
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Status
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Options: activate to sort column ascending">
                                                        Options
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                                @* <div class="card-body" id="student_homework_list">
                                    <div id="student-homework-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="student-homework-table"
                                               class="table table-striped table-bordered dataTable no-footer compact"
                                               aria-describedby="student-homework-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Homework ID: activate to sort column ascending">
                                                        Homework ID
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Homework name: activate to sort column ascending">
                                                        Homework Name
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="student-homework-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Score: activate to sort column ascending">
                                                        Score
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                </div> *@
                            </div>
                        </div>
                    </div>
                    <div class="col-xl-12 cardFB">
                        <div class="card profile">
                            <div class="card-header">
                                <h4>Student List</h4>
                            </div>
                            <div class="card-body">
                                <div id="enroll-table_wrapper" class="dataTables_wrapper no-footer">
                                    <table id="enroll-table"
                                           class="table table-striped table-bordered dataTable no-footer compact"
                                           aria-describedby="enroll-table_info">
                                        <thead>
                                            <tr>
                                                <th class="sorting sorting_asc" tabindex="0"
                                                    aria-controls="enroll-table" rowspan="1"
                                                    colspan="1" aria-sort="ascending"
                                                    aria-label="Student ID: activate to sort column ascending">
                                                    Student ID
                                                </th>
                                                <th class="sorting sorting_asc" tabindex="0"
                                                    aria-controls="enroll-table" rowspan="1"
                                                    colspan="1" aria-sort="ascending"
                                                    aria-label="Student Name: activate to sort column ascending">
                                                    Student Name
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
        var id = sessionStorage.getItem('usrId');
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var enrollTable;
        var attendanceTable;
        var homeworkTable;
        var scheduleTable;
        let selectedRow;
        let isTableDataEmpty = false; // To track if response data is empty
        let isHomeworkTableDataEmpty = false; // To track if response data is empty
        let hideTableTimer = null; // Timer to handle delayed table hiding
        let hideAttendanceTableTimer = null; // Timer to handle delayed table hiding
        let isTableVisible = false; // Track the table visibility status
        let isHomeworkTableVisible = false; // Track the table visibility status
        $(document).ready(function() {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            DataTable.render.time = function ( { includeId = "schedule-start-time" } ) {
                return function (data, type, row) {
                    var str = moment(data, "HH:mm:ss");
                    // console.log(str);
                    if (type === 'display') {
                        return '<span id="' + includeId + '">' + str.format("hh:mm A") + '</span >';
                    }

                    // Search, order and type can use the original data
                    return str;
                };
            };
            enrollTable = new DataTable('#enroll-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'enrollId' },
                    { data: 'student.account.fullname' },
                    // { data: 'status' },
                    // { Add a select box in the last column
                    //     data: 'status',
                    //     render: function (data, type, row, meta) {
                    //         return `
                    //                     <select class="custom-select form-control enroll-status" data-enrollid="${row.enrollId}">
                    //                     `
                    //             + getEnrollStatusOptions(data) +
                    //             `
                    //                     </select>
                    //                     `;
                    //     }
                    // }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search enroll...'
                        },
                        searchIcon: {
                        }
                    }
                }
            });
            callApiGetClassDetail();
            scheduleTable = new DataTable('#schedule-table', {
                data: [],
                lengthMenu: [5, 10, 25, 50],
                pageLength: 5,
                deferRender: false,
                responsive: true,
                columns: [
                    {
                        data: 'scheduleNumber',
                        className: 'dt-head-left'
                    },
                    {
                        data: 'session.title'
                    },
                    {
                        data: 'scheduleDate',
                        render: DataTable.render.date("dddd, DD/MM/YYYY"),
                        className: 'dt-head-left'
                    },
                    {
                        data: 'startTime',
                        render: DataTable.render.time({ includeId: "schedule-start-time" })
                    },
                    {
                        data: 'endTime',
                        render: DataTable.render.time({ includeId: "schedule-end-time" })
                    },
                    {
                        data: 'status'
                    },
                    {
                        data: 'session.hours'
                    },
                    {
                        data: 'scheduleId'
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'search info...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'single'
                },
            }).on('draw', function (e, settings) {
                scheduleTable.column(6).visible(false, false);
                scheduleTable.column(7).visible(false, false);

                updateScheduleStatuses();
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Clear any pending hide action
                    if (hideTableTimer) {
                        clearTimeout(hideTableTimer);
                        hideTableTimer = null;
                    }
                    const rowScheduleId = dt.row(indexes[0]).data().scheduleId;
                    callApiGetAttendanceList(rowScheduleId);

                    // Ensure the target table is visible
                    if (!isTableVisible) {
                        $('#student_list').stop(true, true).slideDown(300);
                        isTableVisible = true;
                    }
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    // Set a short timer to delay hiding the table
                    hideTableTimer = setTimeout(() => {
                        const selectedRows = dt.rows({ selected: true }).count();

                        // Only hide the table if no rows are selected
                        if (selectedRows === 0 && isTableVisible) {
                            $('#student_list').stop(true, true).slideUp(300);
                            attendanceTable.clear().draw();
                            isTableVisible = false;
                        }
                    }, 50);
                }
            });
            // Set up the timer to frequently check the current time
            setInterval(() => {
                updateScheduleStatuses(); // Function to update rows
            }, 5000); // Check every 5 seconds (5000ms). Adjust interval as needed.

            attendanceTable = new DataTable('#student-table', {
                data: [],
                deferRender: false,
                responsive: true,
                lengthMenu: [5, 10, 25, 50],
                pageLength: 5,
                columns: [
                    { 
                        data: 'studentId',
                        className: 'dt-head-left'
                    },
                    { 
                        data: 'student.account.fullname' 
                    },
                    {
                        data: 'hasAttended', // Add an attendance column
                        render: function (data, type, row, meta) {
                            // Render a checkbox, set checked if "attend", unchecked if "absent"
                            const statusText = scheduleTable.rows({ selected: true }).data()[0].status;
                            const checked = data === 'Attended' ? 'checked' : '';
                            const disabled = statusText === 'Ended' || statusText === 'Cancelled' ? 'disabled' : '';
                            return `
                                <div class="custom-control custom-checkbox">
                                    <input type="checkbox" class="attendance-checkbox custom-control-input" ${checked}
                                        data-attendance-id="${row.attendanceId}" id="customCheck${row.attendanceId}" ${disabled} >
                                    <label class="custom-control-label" class="attendance-checkbox-label" for="customCheck${row.attendanceId}" data-attendance-id="${row.attendanceId}" id="customCheck${row.attendanceId}" >${data}</label>
                                </div>
                            `;
                        },
                        orderable: false, // Prevent sorting on this column
                        searchable: false // Prevent searching on this column
                    },
                    {
                        data: 'studentProgress',
                        render: function (data, type, row, meta){
                            // if(data){
                            //     if (row.homeworkCurrentProgress && row.homeworkAmount)
                            //         return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                            //     return `${data}`;
                            // }
                            // return `
                            //           Records not found
                            //         `;
                            return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                        }
                    }
                    // ,
                    // {
                    //     data: null,
                    //     render: function (data, type, row, meta) {
                    //         if(data){
                    //             if (row.homeworkCurrentProgress && row.homeworkAmount)
                    //                 return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                    //             return `${data}`;
                    //         }
                    //         return `
                    //                   Records not found
                    //                 `;
                    //         return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                    //     }
                    // }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search student...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'single',
                    selector: 'td:not(:has(input.attendance-checkbox))'
                },
            }).on('draw', function (e, settings) {
                // Attach listener to checkboxes after the table is drawn
                $('#student-table div .attendance-checkbox')
                    .off('change')
                    // .on('click', function (e) {
                    //     e.stopPropagation(); Prevent row selection when checkbox is clicked
                    // })
                    .on('change', function (e) {
                        const attendanceId = $(this).data('attendance-id');
                        const isChecked = $(this).is(':checked');
                        const status = isChecked ? 'Attended' : 'Absent';

                        const node = $(this).parent();

                        // Update the data or call API
                        callApiUpdateAttendanceStatus(attendanceId, status);//  Call your API or update logic here
                        if (node.children('label').length > 0) {
                            const label = node.children('label');
                            // console.log(node);
                            label.text(status);
                        }
                });

                // $('#student-table')
                // .on('click', '.attendance-checkbox', function (e) {
                //     e.stopPropagation(); Prevent the click event from bubbling up to the row
                // })
                // .on('change', '.attendance-checkbox', function () {
                //     const attendanceId = $(this).data('attendance-id');
                //     const isChecked = $(this).is(':checked');
                //     const status = isChecked ? 'Attended' : 'Absent';

                //     const node = $(this).parent();

                //     Update the data or call API
                //     callApiUpdateAttendanceStatus(attendanceId, status); Call your API or update logic here
                //     if (node.children('label').length > 0) {
                //         const label = node.children('label');
                //         label.text(status);
                //     }
                // });
                // $('#student-table').on('click', '.attendance-checkbox-label', function (e) {
                //     e.stopPropagation(); Prevent the click event from bubbling up to the row
                // });
            }).on('select', function (e, dt, type, indexes) {
                if (type === 'row') {
                    console.log('check');
                    // Clear any pending hide action
                    if (hideAttendanceTableTimer) {
                        clearTimeout(hideAttendanceTableTimer);
                        hideAttendanceTableTimer = null;
                    }
                    // const rowScheduleId = dt.row(indexes[0]).data().scheduleId;
                    // callApiGetAttendanceList(rowScheduleId);
                    // if (!$('#student_list').is(':visible')) {
                    //     $('#student_list').stop(true, true).slideDown(400); Slide down to show the table
                    // }
                    // Ensure the target table is visible
                    // if (!isTableDataEmpty) {
                    //     $('#student_list').stop(true, true).slideDown(400); Slide down to show the table
                    // }
                    // console.log(selectedRows);

                    const studentDetails = dt.row(indexes[0]).data();// .studentProgress.studentHomeworks;
                    // console.log(studentDetails);
                    if (studentDetails &&
                        studentDetails.studentProgress &&
                        studentDetails.studentProgress.studentHomeworks &&
                        studentDetails.studentProgress.studentHomeworks.length > 0) {
                        console.log('this is not empty!');
                        isHomeworkTableDataEmpty = false;
                        homeworkTable.clear().rows.add(studentDetails.studentProgress.studentHomeworks).draw();
                    } else {
                        console.log('this is empty!');
                        isHomeworkTableDataEmpty = true;
                        homeworkTable.clear().draw();
                    }

                    // Ensure the target table is visible
                    if (!isHomeworkTableVisible) {
                        $('#student_homework_list').stop(true, true).slideDown(300);
                        isHomeworkTableVisible = true;
                    }

                    // const row = dt.row(indexes[0]);

                    // console.log(row);

                    // if (row.child.isShown()) {
                    //     row.child.hide();
                    //     tr.removeClass('shown');
                    // } else {
                    //     row.child(formatAttendance(row.data())).show();
                    //     tr.addClass('shown');
                    // }

                    // indexes.forEach(function (rowIdx) {
                    //     var data = dt.row(rowIdx).data();
                    //     const scheduleId = dt.row(rowIdx).data().scheduleId;
                    //     callApiGetAttendanceList(scheduleId);
                    //     Check if the target table is not empty
                    //     if (targetTable.data().any()) {
                    //         Animate slide down to reveal the target table
                    //         $('#student_list').stop(true, true).slideDown(400); Adjust duration as needed
                    //     }
                    // });
                }
            }).on('deselect', function (e, dt, type, indexes) {
                if (type === 'row') {
                    console.log('uncheck');
                    // Check if there are still any selected rows
                    // const selectedRows = dt.rows({ selected: true }).count();
                    // if (selectedRows === 0) {
                    //     attendanceTable.clear().draw();
                    //     Slide up to hide the table if no rows are selected
                    //     $('#student_list').stop(true, true).slideUp(400);
                    // }
                    // Only hide the table if no rows are selected
                    // if(selectedRows === 0 && ){
                    //     dt.clear().draw();
                    //     isTableDataEmpty = true;
                    // }
                    // Set a short timer to delay hiding the table
                    hideAttendanceTableTimer = setTimeout(() => {
                        const selectedRows = dt.rows({ selected: true }).count();

                        // Only hide the table if no rows are selected
                        if (selectedRows === 0 && isHomeworkTableVisible) {
                            $('#student_homework_list').stop(true, true).slideUp(300);
                            isHomeworkTableVisible = false;
                        }
                    }, 50); // Short delay to ensure the `select` event has been triggered if applicable
                    // if (selectedRows === 0) {
                    //     dt.clear().draw();
                    //     $('#student_list').stop(true, true).slideUp(400); Slide up to hide the table
                    // }
                    // indexes.forEach(function (rowIdx) {
                    //     Animate slide up to hide the target table
                    //     attendanceTable.clear().draw();
                    //     Check if the target table is not empty
                    //     if (!targetTable.data().any()) {
                    //         Animate slide down to reveal the target table
                    //         $('#student_list').stop(true, true).slideUp(400); Adjust duration as needed
                    //     }
                    // });
                }
            });

            homeworkTable = new DataTable('#homework-table', {
                data: [],
                deferRender: false,
                responsive: true,
                lengthMenu: [5, 10, 25, 50],
                pageLength: 5,
                columns: [
                    {
                        data: 'homeworkId',
                        className: 'dt-head-left'
                    },
                    {
                        data: null, // 'student.account.fullname'
                        render: function (data, type, row, meta) {
                            return ` bruh
                                    `;
                        },
                    },
                    {
                        data: 'point',
                        // data: 'hasAttended', Add an attendance column
                        // render: function (data, type, row, meta) {
                        //     Render a checkbox, set checked if "attend", unchecked if "absent"
                        //     const statusText = scheduleTable.rows({ selected: true }).data()[0].status;
                        //     const checked = data === 'Attended' ? 'checked' : '';
                        //     const disabled = statusText === 'Ended' || statusText === 'Cancelled' ? 'disabled' : '';
                        //     return `
                        //                 <div class="custom-control custom-checkbox">
                        //                     <input type="checkbox" class="attendance-checkbox custom-control-input" ${checked}
                        //                         data-attendance-id="${row.attendanceId}" id="customCheck${row.attendanceId}" ${disabled} >
                        //                     <label class="custom-control-label" for="customCheck${row.attendanceId}">${data}</label>
                        //                 </div>
                        //             `;
                        // },
                        // orderable: false, Prevent sorting on this column
                        // searchable: false Prevent searching on this column
                    },
                    {
                        data: 'status',
                        // data: 'studentProgress',
                        // render: function (data, type, row, meta) {
                        //     if(data){
                        //         if (row.homeworkCurrentProgress && row.homeworkAmount)
                        //             return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                        //         return `${data}`;
                        //     }
                        //     return `
                        //               Records not found
                        //             `;
                        //     return `${row.homeworkCurrentProgress} / ${row.homeworkAmount} Homeworks submitted`;
                        // }
                    },
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return ` bruh
                                            `;
                        },
                    }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'Search homework...'
                        },
                        searchIcon: {
                        }
                    }
                },
            });

        });
        function updateScheduleStatuses() {
            scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                const currentStatus = this.cell(rowIdx, 5).data(); // Current status in the table
                if (currentStatus !== "Ended" && currentStatus !== "Cancelled"){
                    // const startTime = this.cell(rowIdx, 3).data(); Start time
                    // const endTime = this.cell(rowIdx, 4).data(); End time
                    // const isTimeInBetween = moment().isBetween(
                    //     moment(startTime, "HH:mm:ss"),
                    //     moment(endTime, "HH:mm:ss"),
                    //     "HH:mm:ss"
                    // );
                    const thisRowDate = moment(this.cell(rowIdx, 2).data(), "YYYY-MM-DDTHH:mm:ss"); // Parse date
                    const thisRowEndTime = moment(this.cell(rowIdx, 4).data(), "HH:mm:ss"); // Parse time only
                    const scheduleId = this.cell(rowIdx, 7).data(); // Schedule ID

                    // Combine date and time for full comparison
                    const fullRowDateTime = thisRowDate.clone().set({
                        hour: thisRowEndTime.hours(),
                        minute: thisRowEndTime.minutes(),
                        second: thisRowEndTime.seconds(),
                    });

                    // Check if the current date-time is after the row's date-time
                    const isGivenDateBefore = moment().isAfter(thisRowDate);
                    const isScheduleOverdue = moment().isAfter(fullRowDateTime);

                    if (isGivenDateBefore) {
                        if (isScheduleOverdue) {
                            // Call API to update status to "Ended"
                            callApiUpdateScheduleStatus(scheduleId, "Ended");
                        } else {
                            // Render status dropdown
                            renderStatusDropdown(this, rowIdx, currentStatus, scheduleId);
                        }
                    } else {
                        // Render status dropdown for future dates
                        renderStatusDropdown(this, rowIdx, currentStatus, scheduleId);
                    }
                    // if (isTimeInBetween) {
                    //     const scheduleId = this.cell(rowIdx, 0).data();
                    //     const node = $(this.cell(rowIdx, 5).node());

                    //     Change display to a select box if not already updated
                    //     if (!node.children('select').length) {
                    //         node.html(`
                    //                     <select class="custom-select form-control schedule-status" id="schedule-status-${rowIdx}">
                    //                         ${getScheduleStatusOptions(currentStatus)}
                    //                     </select>
                    //                 `);

                    //         Add change event listener to the select element
                    //         node.find('select').on('change', function () {
                    //             const newStatus = $(this).val();
                    //             callApiUpdateScheduleStatus(scheduleId, newStatus);
                    //         });
                    //     }
                    // }
                }
            });
        }
        /**
        * Renders the status dropdown in the specified row cell.
        */
        function renderStatusDropdown(row, rowIdx, currentStatus, scheduleId) {
            const node = $(row.cell(rowIdx, 5).node());

            // Avoid re-rendering if the dropdown already exists
            if (!node.children('select').length) {
                node.html(`
                    <select class="custom-select schedule-status" id="schedule-status-${rowIdx}">
                        ${getScheduleStatusOptions(currentStatus)}
                    </select>
                `);

                // Add a new class to the node
                node.addClass('custom-select-cell');

                // Add change event listener to the select element
                node.find('select')
                    .off('click  change')
                    .on('click', function (e) {
                        e.stopPropagation(); // Prevent row selection when checkbox is clicked
                    })
                    .on('change', function () {
                        const newStatus = $(this).val();
                        callApiUpdateScheduleStatus(scheduleId, newStatus);
                    });
            }
        }
        function getScheduleDateBasedOnTodayOrDefault(defaultRowIdx) {
            // Get today's date in the desired format
            const today = moment().startOf('day'); // Format based on your data

            // Get the page length (number of rows per page)
            const pageLength = scheduleTable.page.len();

            // Initialize variables to track the closest date and its row index
            let closestDate = null;
            let closestRowIndex = -1;

            // Loop through all rows to find today's date or the closest previous date
            scheduleTable.rows().every(function (rowIdx, tableLoop, rowLoop) {
                const dateInRow = moment(this.cell(rowIdx, 2).data()); // Adjust format to match your table data
                if (dateInRow.isValid()) {
                    if (dateInRow.isSame(today)) {
                        // If today's date matches exactly, select this row
                        closestDate = dateInRow;
                        closestRowIndex = rowIdx;
                        return false; // Stop searching
                    } else if (dateInRow.isBefore(today)) {
                        // If the date is before today, check if it's the closest one
                        if (!closestDate || dateInRow.isAfter(closestDate)) {
                            closestDate = dateInRow;
                            closestRowIndex = rowIdx;
                        }
                    }
                }
            });

            // If a matching or closest date row is found
            if (closestRowIndex !== -1) {
                // Calculate the page number
                const pageNumber = Math.floor(closestRowIndex / pageLength);

                // Navigate to the page containing the row
                scheduleTable.page(pageNumber).draw(false);

                // Select the row
                scheduleTable.row(closestRowIndex).select();
                // console.log(`Selected row with date: ${closestDate.format("MM/DD/YYYY")}`);
            } else if (defaultRowIdx !== undefined) {
                scheduleTable.row(defaultRowIdx).select(); // Re-select the row by its index
                // console.log("No row found with today's date or any previous date.");
            } else {
                attendanceTable.clear().draw();
            }
        }
        // Function to get the currently selected row's data and index
        function getSelectedRowInfo() {
            const selectedRows = scheduleTable.rows({ selected: true });
            if (selectedRows.count() > 0) {
                const rowIndex = selectedRows.indexes()[0]; // Get the index of the first selected row
                const rowData = selectedRows.data()[0]; // Get the data of the first selected row
                return { rowIndex, rowData };
            }
            return null; // No row is selected
        }
        function getEnrollStatusOptions(selectedStatus) {
            var options = ['Enrolled', 'Cancelled']; // Example statuses
            var html = '';
            switch (selectedStatus) {
                case 'Enrolled':
                    options = ['Enrolled', 'Cancelled']
                    break;
                case 'Cancelled':
                    options = ['Cancelled']
                    break;
            }
            options.forEach(function (status) {
                html += `<option value="${status}" ${selectedStatus === status ? 'selected' : ''} >${status}</option>`;
            });

            return html;
        }
        function getScheduleStatusOptions(selectedStatus) {
            var options = ['Upcoming', 'Ongoing', 'Ended', 'Cancelled']; // Example statuses
            var html = '';
            switch (selectedStatus) {
                case 'Upcoming':
                    options = ['Upcoming', 'Ongoing', 'Ended', 'Cancelled']
                    break;
                case 'Ongoing':
                    options = ['Ongoing', 'Ended', 'Cancelled']
                    break;
                case 'Ended':
                    options = ['Ended']
                    break;
                case 'Cancelled':
                    options = ['Cancelled']
                    break;
            }
            options.forEach(function (status) {
                html += `<option value="${status}"${selectedStatus === status ? ' selected' : ''}>${status}</option>`;
            });
            return html;
        }
        function callApiGetClassDetail() {
            $.ajax({
                url: apiUrl + 'Class/Teacher/@Model.ClassID', // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        // console.log(response.data);
                        setClassDisplay(response.data);
                        // Check if homeworkAnswers is empty
                        if (response.data.enrolls && response.data.enrolls.length > 0) {
                            enrollTable.clear().rows.add(response.data.enrolls).draw();
                        }
                        if (response.data.schedules && response.data.schedules.length > 0) {
                            selectedRow = getSelectedRowInfo();
                            scheduleTable.clear().rows.add(response.data.schedules).draw();
                            if(selectedRow == null)
                                getScheduleDateBasedOnTodayOrDefault(selectedRow != null ? selectedRow.rowIndex : 1);
                        }
                        // console.log(response.data);
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function callApiGetStudentDetail() {
            $.ajax({
                url: apiUrl + 'Student/ByClass/@Model.ClassID', // API endpoint
                type: 'GET',
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        setClassDisplay(response.data);
                        // Check if homeworkAnswers is empty
                        if (response.data.students && response.data.students.length > 0) {
                            // Clear any existing answers
                            $('#student_list').empty();

                            studentList = response.data.students;
                            // Loop through each answer and generate the HTML
                            response.data.students.forEach(function (student) {
                                let studentHtml = generateStudentHtml(student, response.data.status); // Assuming both studentInfo and updateAnswer are the same structure
                                $('#student_list').append(studentHtml);
                            });
                        } else {
                            // If the answer list is empty
                            $('#student_list').html('<h5>No students found</h5>');
                        }
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function callApiGetAttendanceList(scheduleId) {
            $.ajax({
                url: apiUrl + 'Teacher/Student/Attendance/All/ByScheduleId/' + scheduleId, // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                success: function (response) {
                    // Log the entire response to the console for debugging
                    // Check if the status is true
                    if (response.status) {
                        if (response.data && response.data.length > 0) {
                            isTableDataEmpty = false;
                            // console.log(response.data);
                            attendanceTable.clear().rows.add(response.data).draw();
                        }
                        else {
                            isTableDataEmpty = true;
                            attendanceTable.clear().draw();
                        }
                        // showAlert('success', 'Schedule status updated');
                    } else {
                        showAlert('error', 'Failed to fetch attendance list. Error: ' + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }

        function callApiUpdateAttendanceStatus(attId, newStatus) {
            $.ajax({
                url: apiUrl + `Attendance/${attId}/Update/Status`, // API endpoint for updating status
                type: 'PUT', // HTTP method PUT for updates
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(newStatus), // Data sent in the request body data: JSON.stringify({ status: newStatus.toString() }),
                success: function (response) {
                    if (response.status) {
                        // callApiGetClassDetail();
                        showAlert('success', 'Attendance status updated.');
                    } else {
                        showAlert('error', 'Failed to update attendance. Error: ' + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }

        function callApiUpdateScheduleStatus(scheduleId, newStatus) {
            $.ajax({
                url: apiUrl + `Schedule/${scheduleId}/Update/Status`, // API endpoint for updating status
                type: 'PUT', // HTTP method PUT for updates
                headers: {
                    'Authorization': 'Bearer ' + token, // Token for authentication
                },
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(newStatus), // Data sent in the request body data: JSON.stringify({ status: newStatus.toString() }),
                success: function (response) {
                    if (response.status) {
                        callApiGetClassDetail();
                        showAlert('success', 'Schedule status updated');
                    } else {
                        showAlert('error', 'Failed to update status. Error: ' + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
        function setClassDisplay(data) {
            var filteredEnrollList = data.enrolls.filter(function (enroll) {
                return enroll.status === 'Enrolled';
            });
            var statusText = '';
            switch (data.status) {
                case 'Open':
                case 'Ongoing':
                    statusText = `<span class="outcome" style="float: left;">${data.status}</span>`
                    break;
                case 'Draft':
                case 'Postponed':
                    statusText = `<span class="approval" style="float: left;">${data.status}</span>`
                    break;
                case 'Ended':
                case 'Cancelled':
                    statusText = `<span class="destroy" style="float: left;">${data.status}</span>`
                    break;
            }
            if (data.status != 'Draft' && data.status != 'Postponed') {
                let dadiv = $('div.dt-modal-toggle').parent();
                dadiv.find('div.dt-modal-toggle').remove();
            }
            formatter = new Intl.NumberFormat('vi-VN', {
                style: 'currency',
                currency: 'VND',
            });
            // Display Class Info
            // $('#class-title-status').find('#class-class-status').remove();
            $('#class-status').empty();
            $('select[id="updateClassStatus_Status"]').empty();
            $('#class-status').append(statusText);
            $('#class-id').text(data.classId);
            $('#class-class-title').text('Class ' + data.className + ' Infomations');
            // $('#class-name').text(data.className);
            $('#class-course').text(data.course.courseName);
            $('#class-course').attr('href', `/Teacher/Course/${data.course.courseId}/Info`);
            $('#class-start-date').text(formatDate(data.startDate, { ignoreHour: true }));
            $('#class-end-date').text(formatDate(data.endDate, { ignoreHour: true }));
            $('#class-current-students-amount').text(filteredEnrollList.length + ' Student(s)');
            $('#class-minimum-students-amount').text(data.minimumStudents);
            $('#class-maximum-students-amount').text(data.maximumStudents);
            $('#class-enroll-fee').text(formatter.format(data.enrollmentFee));
            $('#class-schedules-amount').text(data.schedules.length + ' Scheduled Session(s)');
        }
    </script>
</body>
</html>