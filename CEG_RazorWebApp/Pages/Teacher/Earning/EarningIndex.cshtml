@page "/Teacher/Earning/Index"
@model CEG_RazorWebApp.Pages.Teacher.Earning.EarningIndexModel
@{
    ViewData["Title"] = "Teacher All Earnings Page";
    // var createTransaction = Model.CreateTransactionInfo;
    Layout = "~/Pages/Shared/_TLayout.cshtml";
}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
</head>
<body>
    <div class="main-content">
        <div id="alertContainer"></div>
        <div class="main">
            <div class="container-fluid">
                <div class="row">
                    <div class="offset-sm-6 col-sm-6  d-flex justify-content-sm-end p-md-0 mt-2 mt-sm-0 ">
                        <ol class="breadcrumb">
                            <li class="breadcrumd-item">
                                <a href="#">Manage</a>
                            </li>
                            <li class="breadcrumd-item">
                                <span>/</span>
                            </li>
                            <li class="breadcrumd-item">
                                <a href="/Teacher/Earning/Index">Earnings</a>
                            </li>
                        </ol>
                    </div>
                </div>
                <section>
                    <div class="card">
                        <div class="card-body">
                            <!-- Nav tabs -->
                            <ul class="nav nav-tabs">
                                <!-- dung vong for o day -->
                                <li class="nav-item">
                                    <a class="nav-link active" data-toggle="tab" href="#home1">
                                        <i class='bx bx-home-alt-2'></i>
                                        <span>All Earnings</span>
                                    </a>
                                </li>
                            </ul>
                            <!-- Tab panes -->
                            <div class="tab-content">
                                <!-- home1 -->
                                <div class="tab-pane active" id="home1" role="tabpanel">
                                    <div class="row">
                                    </div>
                                    <div id="transaction-table_wrapper" class="dataTables_wrapper no-footer">
                                        <table id="transaction-table"
                                               class="table table-striped table-bordered dataTable no-footer"
                                               aria-describedby="transaction-table_info">
                                            <thead>
                                                <tr>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Transaction ID: activate to sort column ascending">
                                                        ID
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Payer: activate to sort column ascending">
                                                        Payer
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Payer: activate to sort column ascending">
                                                        Reciever
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Amount
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Payment Type
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Payment Method
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Class: activate to sort column ascending">
                                                        Class
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Description
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Transaction Date
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Confirm Date
                                                    </th>
                                                    <th class="sorting sorting_asc" tabindex="0"
                                                        aria-controls="transaction-table" rowspan="1"
                                                        colspan="1" aria-sort="ascending"
                                                        aria-label="Status: activate to sort column ascending">
                                                        Status
                                                    </th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                            </tbody>
                                        </table>
                                    </div>
                                    <!-- end tapnet -->
                                </div>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </div>
    </div>
    @* <div id="createTransaction" class="modal fade" role="dialog">
        <div class="modal-dialog modal-dialog-centered modal-xl" role="document">
            <div class="modal-content modal-addRoom">
                <div class="modal-header">
                    <h4 class="modal-title">Add new Transaction</h4>
                </div>
                <ul class="nav nav-tabs justify-content-center" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active align-items-center d-flex w-auto" data-toggle="tab" href="#enrollment_Tab" role="tab" aria-controls="enrollment" aria-selected="true">
                            <span>Enrollment</span>
                        </a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="enrollment_Tab" class="tab-pane fade show active">
                        <form method="post" id="createEnrollmentTransactionForm">
                            <div class="modal-body">
                                <div class="row p-4">
                                    <div class="col-12">
                                        <div class="row form-group">
                                            <label asp-for="@createTransaction.ParentFullname" class="col-md-4 col-form-label text-md-right">Parent Fullname</label>
                                            <div class="col-md-8 p-0">
                                                <select id="select2-parent-fullname-enrollment-dropdown" class="form-control custom-select" style="width: 100%;"></select>
                                            </div>
                                            <span asp-validation-for="@createTransaction.ParentFullname" id="error_message"
                                                  class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                            <label asp-for="@createTransaction.StudentFullname" class="col-md-4 col-form-label text-md-right">Student Fullname</label>
                                            <div class="col-md-8 p-0">
                                                <select id="select2-student-fullname-dropdown" class="form-control custom-select" style="width: 100%;"></select>
                                            </div>
                                            <span asp-validation-for="@createTransaction.StudentFullname" id="error_message"
                                                  class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                            <label asp-for="@createTransaction.Classname" class="col-md-4 col-form-label text-md-right">Class Name</label>
                                            <div class="col-md-8 p-0">
                                                <select id="select2-class-name-dropdown" class="form-control custom-select" style="width: 100%;"></select>
                                            </div>
                                            <span asp-validation-for="@createTransaction.Classname" id="error_message"
                                                  class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                            <label asp-for="@createTransaction.TransactionAmount" class="col-md-4 col-form-label text-md-right">Amount</label>
                                            <input asp-for="@createTransaction.TransactionAmount" type="text" required class="form-control col-md-8">
                                            <span asp-validation-for="@createTransaction.TransactionAmount" id="error_message"
                                                  class="helper-text text-danger d-block offset-md-5 col-md-5 col-sm-8 mt-2"></span>

                                            <input asp-for="@createTransaction.TransactionType" type="text" value="Enrollment" required hidden readonly>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="modal-footer justify-content-center">
                                <button class="btn btn-success" type="submit">Create</button>
                                <button class="btn btn-danger" type="button" data-dismiss="modal">Cancel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div> *@
    <script>
        var id = sessionStorage.getItem('usrId');
        var token = sessionStorage.getItem('token');
        var apiUrl = sessionStorage.getItem('apiUrl');
        var transactionList;
        $(document).ready(function () {
            // Registering the custom feature with DataTables
            DataTable.feature.register('searchIcon', function (settings, opts) {
                // Set default options
                let options = Object.assign({
                    iconClass: 'bx bx-search-alt question-search-icon',
                    hideLabel: true // Hide search label
                }, opts);

                // Create a container for the icon
                let container = document.createElement('div');
                // container.classList.add('dt-custom-toolbar'); // Optional custom class for styling

                // Create the icon element
                let icon = document.createElement('i');
                icon.className = options.iconClass;

                // Check if pagination is enabled
                // if (settings.oFeatures.bFilter) {
                //     console.log(settings.oFeatures.bFilter);
                //     console.log('Pagination is enabled for this DataTable.');
                // }

                setTimeout(() => {
                    // Find the .dt-search container inside the DataTable wrapper
                    let searchContainer = $(settings.nTableWrapper).find('.dt-search');
                    if (searchContainer.length) {
                        searchContainer.append(icon);
                    } else {
                        // Append icon to container
                        container.appendChild(icon);
                        // If .dt-search doesn't exist, insert the container in the DataTable toolbar instead
                        $(settings.nTableWrapper).prepend(container);
                    }
                    if (options.hideLabel) {
                        // Find the .dt-search label container inside the DataTable wrapper
                        let searchLabel = searchContainer.find('label');
                        if (searchLabel.length) {
                            searchLabel.text('');
                        } else {
                            console.log('Label of search div not found!');
                        }
                    }
                }, 100);
                return '';
            });
            $('#select2-parent-fullname-enrollment-dropdown').select2({
                placeholder: 'Select a parent',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
            .on('change', function () {
                var data = $(this).select2('data');
                // Manually trigger select2:select
                $(this).trigger({
                    type: 'select2:select',
                    params: { data: data }
                });
            })
            .off('select2:select') // Remove previous bindings
            .on('select2:select', function (e) {
                var text = $(this).select2('data')[0].text;
                callApiGetStudentNameList(text);
            })
            ;
            $('#select2-student-fullname-dropdown').select2({
                placeholder: 'Select a student to enroll',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
            .on('change', function () {
                var data = $(this).select2('data');
                // Manually trigger select2:select
                $(this).trigger({
                    type: 'select2:select',
                    params: { data: data }
                });
            })
            .off('select2:select') // Remove previous bindings
            .on('select2:select', function (e) {
                var text = $(this).select2('data')[0].text;
                callApiGetClassNameList(text);
            })
            ;

            $('#select2-class-name-dropdown').select2({
                placeholder: 'Select a class for enrollment',
                allowClear: true,
                width: 'resolve',
                theme: 'bootstrap4'
            })
            .on('change', function () {
                var data = $(this).select2('data');

                // Manually trigger select2:select
                $(this).trigger({
                    type: 'select2:select',
                    params: { data: data }
                });
            })
            .off('select2:select') // Remove previous bindings
            .on('select2:select', function (e) {
                var selectedData = $(this).select2('data');
                if (selectedData.length > 0 && selectedData[0].text != "No classes available") {
                    var value = selectedData[0].id;
                    enrollAmount.set(value);
                }
            })
            ;

            // $('#select2-parent-fullname-donation-dropdown').select2({
            //     placeholder: 'Select a parent',
            //     allowClear: true,
            //     width: 'resolve',
            //     theme: 'bootstrap4'
            // });

            transactionTable = new DataTable('#transaction-table', {
                data: [],
                deferRender: false,
                responsive: true,
                columns: [
                    { data: 'transactionId' },
                    { data: 'payerFullname' },
                    { data: 'receiverFullname' },
                    { 
                        data: 'transactionAmount',
                        render: function (data, type, row, meta) {
                            formatter = new Intl.NumberFormat('vi-VN', {
                                style: 'currency',
                                currency: 'VND',
                            });
                            var formatPrice = formatter.format(data);
                            return `<span class="price-format" data-price="${data}">${formatPrice}</span >`;
                        }
                    },
                    { data: 'transactionType' },
                    { data: 'paymentMethod'},
                    { data: 'className' },
                    { data: 'description' },
                    {
                        data: 'transactionDate',
                        // render: function (data, type, row, meta) {
                        //     return '<span>' + formatDate(data, { addDayOfWeek: true, includeAmPm: true }) + '</span >';
                        // },
                        render: DataTable.render.date("dddd, DD/MM/YYYY hh:mm A")
                    },
                    {
                        data: 'confirmDate',
                        // render: function (data, type, row, meta) {
                        //     return '<span>' + formatDate(data, { addDayOfWeek: true, includeAmPm: true }) + '</span >';
                        // },
                        render: DataTable.render.date("dddd, DD/MM/YYYY hh:mm A")
                    },
                    { data: 'transactionStatus' }
                ],
                layout: {
                    topEnd: {
                        search: {
                            placeholder: 'search info...'
                        },
                        searchIcon: {
                        }
                    }
                },
                select: {
                    style: 'single'
                }
            });
            callApiGetTransactionList();
        });
        // $('#createEnrollmentTransactionForm').submit(function (event) {
        //     event.preventDefault(); Prevent the form from submitting normally

        //     if ($('#select2-class-name-dropdown').select2('data')[0].text != "No classes available"){
        //         Serialize form data
        //         var formData = {
        //             ParentFullname: $('#select2-parent-fullname-enrollment-dropdown').select2('data')[0].text,
        //             StudentFullname: $('#select2-student-fullname-dropdown').select2('data')[0].text,
        //             Classname: $('#select2-class-name-dropdown').select2('data')[0].text,
        //             TransactionAmount: enrollAmount.getNumber(),
        //             TransactionType: $('#createTransaction_TransactionType').val(),
        //         };
        //         Send AJAX request
        //         $.ajax({
        //             url: apiUrl + 'Transaction/Create',
        //             type: 'POST',
        //             headers: {
        //                 'Authorization': 'Bearer ' + tokenInclude the JWT token
        //             },
        //             contentType: 'application/json',
        //             data: JSON.stringify(formData),
        //             success: function (response) {
        //                 if (response.status) {
        //                     callApiGetTransactionList();
        //                     showAlert('success', "New transaction recorded.");
        //                 } else {
        //                     showAlert('error', "Error: \n" + (response.errorMessage || "Failed to create transaction."));
        //                     alert(response.message || "Failed to create transaction.");
        //                 }
        //             },
        //             error: function (xhr, status, error) {
        //                 Attempt to parse the response text if it is available
        //                 var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

        //                 Extract the custom error message if it exists
        //                 var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
        //                 Check if errorResponse.errors exists and is an object
        //                 if (errorResponse.errors && typeof errorResponse.errors === 'object') {
        //                     Loop through each field in the errors object and append to the errorMessage
        //                     for (var field in errorResponse.errors) {
        //                         if (errorResponse.errors.hasOwnProperty(field)) {
        //                             Add each error message for the field, joining multiple messages if they exist
        //                             var fieldErrors = errorResponse.errors[field].join(", ");
        //                             errorMessage += `\n${field}: ${fieldErrors}`;
        //                         }
        //                     }
        //                 }
        //                 Display the error message using your custom showAlert function
        //                 showAlert('error', "Error: \n" + errorMessage);
        //             }
        //         });
        //     }
        //     showAlert('error', "Error: \n" + "No class available for registration.");
        // });
        // function callApiGetParentNameList(){
        //     Call API to get the list of parent names
        //     $.ajax({
        //         url: apiUrl + 'Parent/All/Fullname', API endpoint
        //         type: 'GET',
        //         success: function (response) {
        //             Check if the status is true
        //             if (response.status) {
        //                 addParentEnrollmentOptions(response.data);
        //                 addParentDonationOptions(response.data);
        //             } else {
        //                 showAlert('error', "Error: \n" + response.errorMessage);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             Attempt to parse the response text if it is available
        //             var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

        //             Extract the custom error message if it exists
        //             var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
        //             Check if errorResponse.errors exists and is an object
        //             if (errorResponse.errors && typeof errorResponse.errors === 'object') {
        //                 Loop through each field in the errors object and append to the errorMessage
        //                 for (var field in errorResponse.errors) {
        //                     if (errorResponse.errors.hasOwnProperty(field)) {
        //                         Add each error message for the field, joining multiple messages if they exist
        //                         var fieldErrors = errorResponse.errors[field].join(", ");
        //                         errorMessage += `\n${field}: ${fieldErrors}`;
        //                     }
        //                 }
        //             }
        //             Display the error message using your custom showAlert function
        //             showAlert('error', "Error: \n" + errorMessage);
        //         }
        //     });
        // }
        // function callApiGetStudentNameList(parentName){
        //     Call API to get the list of student names
        //     $.ajax({
        //         url: apiUrl + 'Student/All/Fullname/ByParent/Name/' + parentName, API endpoint
        //         type: 'GET',
        //         headers: {
        //             'Authorization': 'Bearer ' + tokenInclude the JWT token
        //         },
        //         success: function (response) {
        //             Check if the status is true
        //             if (response.status) {
        //                 addStudentOptions(response.data);

        //             } else {
        //                 showAlert('error', "Error: \n" + response.errorMessage);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             Attempt to parse the response text if it is available
        //             var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

        //             Extract the custom error message if it exists
        //             var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
        //             Check if errorResponse.errors exists and is an object
        //             if (errorResponse.errors && typeof errorResponse.errors === 'object') {
        //                 Loop through each field in the errors object and append to the errorMessage
        //                 for (var field in errorResponse.errors) {
        //                     if (errorResponse.errors.hasOwnProperty(field)) {
        //                         Add each error message for the field, joining multiple messages if they exist
        //                         var fieldErrors = errorResponse.errors[field].join(", ");
        //                         errorMessage += `\n${field}: ${fieldErrors}`;
        //                     }
        //                 }
        //             }
        //             Display the error message using your custom showAlert function
        //             showAlert('error', "Error: \n" + errorMessage);
        //         }
        //     });
        // }
        // function callApiGetClassNameList(studentName) {
        //     Call API to get the list of teacher names
        //     $.ajax({
        //         url: apiUrl + 'Class/All/Status/Open?stuFullname=' + studentName, API endpoint
        //         type: 'GET',
        //         success: function (response) {
        //             Check if the status is true
        //             if (response.status) {
        //                 addClassOptions(response.data);
        //             } else {
        //                 showAlert('error', "Error: \n" + response.errorMessage);
        //             }
        //         },
        //         error: function (xhr, status, error) {
        //             Attempt to parse the response text if it is available
        //             var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

        //             Extract the custom error message if it exists
        //             var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
        //             Check if errorResponse.errors exists and is an object
        //             if (errorResponse.errors && typeof errorResponse.errors === 'object') {
        //                 Loop through each field in the errors object and append to the errorMessage
        //                 for (var field in errorResponse.errors) {
        //                     if (errorResponse.errors.hasOwnProperty(field)) {
        //                         Add each error message for the field, joining multiple messages if they exist
        //                         var fieldErrors = errorResponse.errors[field].join(", ");
        //                         errorMessage += `\n${field}: ${fieldErrors}`;
        //                     }
        //                 }
        //             }
        //             Display the error message using your custom showAlert function
        //             showAlert('error', "Error: \n" + errorMessage);
        //         }
        //     });
        // }
        // function addParentEnrollmentOptions(data) {
        //     $('#select2-parent-fullname-enrollment-dropdown').empty();
        //     data.forEach(item => {
        //         Add each item as an option

        //         let newOption = new Option(item.parentName, item.parentName, false, false);
        //         $('#select2-parent-fullname-enrollment-dropdown').append(newOption);
        //     });
        //     Refresh the Select2 dropdown to show new options
        //     $('#select2-parent-fullname-enrollment-dropdown').trigger('change'); Ensure Select2 is updated
        //     Set up Student list based on the first data
        //     callApiGetStudentNameList(data[0].parentName);
        // }
        // function addStudentOptions(data) {
        //     $('#select2-student-fullname-dropdown').empty();
        //     data.forEach(item => {
        //         Add each item as an option

        //         let newOption = new Option(item, item, false, false);
        //         $('#select2-student-fullname-dropdown').append(newOption);
        //     });
        //     Refresh the Select2 dropdown to show new options
        //     $('#select2-student-fullname-dropdown').trigger('change'); Ensure Select2 is updated
        //     callApiGetClassNameList(data[0]);
        // }
        // function addClassOptions(data) {
        //     const dropdown = $('#select2-class-name-dropdown');
        //     dropdown.empty(); Clear any existing options
        //     if (!data || data.length == 0) {
        //         Add a placeholder option indicating no classes are available
        //         let emptyOption = new Option("No classes available", 10000, true, true);
        //         dropdown.append(emptyOption);
        //     } else {
        //         data.forEach(item => {
        //             Add each item as an option
        //             let newOption = new Option(item.className, item.enrollmentFee, false, false);
        //             dropdown.append(newOption);
        //         });

        //         Set the initial value of `enrollAmount` to the first item's enrollment fee
        //         enrollAmount.set(data[0].enrollmentFee);
        //     }

        //     Refresh the Select2 dropdown to show new options
        //     dropdown.trigger('change'); Ensure Select2 is updated
        // }
        function getTransactionStatusOptions() {
            var options = ['Processing', 'Completed']; // Example statuses
            var html = '';
            options.forEach(function (status) {
                html += `<option value="${status}">${status}</option>`;
            });

            return html;
        }
        function callApiGetTransactionList() {
            $.ajax({
                url: apiUrl + `Transaction/All/ByTeacher/${id}`, // API endpoint
                type: 'GET',
                headers: {
                    'Authorization': 'Bearer ' + token// Include the JWT token
                },
                success: function (response) {
                    // Log the entire response to the console for debugging

                    // Check if the status is true
                    if (response.status) {
                        transactionList = response.data;

                        // console.log(response.data);
                        transactionTable.clear().rows.add(transactionList).draw();
                        // callApiGetParentNameList();
                        // $('#createTransaction_TransactionStatus').empty();
                        // $('#createTransaction_TransactionStatus').append(getTransactionStatusOptions());
                    } else {
                        console.error("API returned false status.");
                    }
                },
                error: function (xhr, status, error) {
                    // Attempt to parse the response text if it is available
                    var errorResponse = xhr.responseText ? JSON.parse(xhr.responseText) : {};

                    // Extract the custom error message if it exists
                    var errorMessage = errorResponse.errorMessage || errorResponse.title || "An unknown error occurred.";
                    // Check if errorResponse.errors exists and is an object
                    if (errorResponse.errors && typeof errorResponse.errors === 'object') {
                        // Loop through each field in the errors object and append to the errorMessage
                        for (var field in errorResponse.errors) {
                            if (errorResponse.errors.hasOwnProperty(field)) {
                                // Add each error message for the field, joining multiple messages if they exist
                                var fieldErrors = errorResponse.errors[field].join(", ");
                                errorMessage += `\n${field}: ${fieldErrors}`;
                            }
                        }
                    }
                    // Display the error message using your custom showAlert function
                    showAlert('error', "Error: \n" + errorMessage);
                }
            });
        }
    </script>
</body>
</html>
